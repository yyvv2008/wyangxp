-- phpMyAdmin SQL Dump
-- version 4.6.5.2
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: 2017-09-23 09:29:03
-- 服务器版本： 5.7.17-log
-- PHP Version: 7.1.0

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `wyxp`
--

-- --------------------------------------------------------

--
-- 表的结构 `admin`
--

CREATE TABLE `admin` (
  `id` int(11) NOT NULL,
  `username` varchar(255) NOT NULL COMMENT '名称',
  `auth_key` varchar(32) NOT NULL COMMENT '认证',
  `password_hash` varchar(255) NOT NULL COMMENT '密码',
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `avatar` varchar(255) DEFAULT NULL COMMENT '头像',
  `status` int(11) NOT NULL DEFAULT '10' COMMENT '状态',
  `created_at` int(11) NOT NULL COMMENT '创建时间',
  `updated_at` int(11) NOT NULL COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='管理';

--
-- 转存表中的数据 `admin`
--

INSERT INTO `admin` (`id`, `username`, `auth_key`, `password_hash`, `email`, `avatar`, `status`, `created_at`, `updated_at`) VALUES
(1, 'wyang', 'UjZvcS2VX6tpMLB9-SfbN3w9ncTqmuhm', '$2y$13$ZoYZWjSiJzNMxZtd6grLTudrOm4ysAdCTRXFppE.Ang7kXNs3obCe', '591012658@qq.com', NULL, 10, 1504664227, 1504664227);

-- --------------------------------------------------------

--
-- 表的结构 `learning`
--

CREATE TABLE `learning` (
  `id` int(11) NOT NULL,
  `title` varchar(60) NOT NULL COMMENT '标题',
  `uid` int(11) NOT NULL COMMENT '作者',
  `cid` int(11) NOT NULL COMMENT '分类',
  `cover` varchar(255) DEFAULT '' COMMENT '封面',
  `content` text NOT NULL COMMENT '内容',
  `remend` int(11) NOT NULL DEFAULT '0' COMMENT '推荐',
  `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态',
  `created_at` int(11) NOT NULL COMMENT '创建时间',
  `updated_at` int(11) NOT NULL COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `learning`
--

INSERT INTO `learning` (`id`, `title`, `uid`, `cid`, `cover`, `content`, `remend`, `status`, `created_at`, `updated_at`) VALUES
(1, 'PHP', 1, 4, '/uploads/cover/59c1c4a64ffe9_php-logo.svg', '~~~php \r\n    echo \'hello world\';\r\n~~~ \r\n', 0, 1, 1504861817, 1505883928),
(2, 'PHP7.0后，curl 上传文件', 1, 4, NULL, '~~~php \r\n$url = \'localhost/upload.php\';\r\n\r\n$file = realpath(\'./test.txt\');\r\n\r\n$post_datas = [\r\n    \'title\' => \'picture\',\r\n    \'img\' => new \\CURLFile($file),\r\n];\r\n\r\n$ch = curl_init();\r\n\r\n$options = [\r\n    CURLOPT_URL => $url,\r\n    CURLOPT_RETURNTRANSFER => 1,\r\n    CURLOPT_POST => 1,\r\n    CURLOPT_POSTFIELDS => $post_datas,\r\n    CURLOPT_TIMEOUT => 30,\r\n];\r\ncurl_setopt_array($ch, $options);\r\n\r\n$res = curl_exec($ch);\r\n$error = curl_error($ch);\r\n\r\ncurl_close($ch);\r\n~~~  \r\n\r\nwin环境不支持多线程，要在linux下测试，妈蛋！妈蛋！妈蛋！', 0, 1, 1505095745, 1505895739),
(3, 'Git 使用笔记', 1, 100, NULL, '别名设置：\r\n~~~git \r\n    git config --global alias.st status\r\n    git config --global alias.br branch\r\n    git config --global alias.ci commit\r\n    git config --global alias.co checkout\r\n~~~  \r\n- - -\r\n重设URL：\r\n~~~git \r\n    git remote set-url origin URL\r\n~~~  \r\n- - -\r\n日志查看：\r\n~~~php\r\n    git log --pretty=\"%h-%an, %ar:%s\"\r\n    ## 显示如下：\r\n    $ git log --pretty=\"%h-%an, %ar:%s\"\r\n    2f53086-wyang, 3 hours ago:\'pjax + ueditor + markdown\'\r\n    91e7f18-wyang, 19 hours ago:\'update\'\r\n    ca0bfc8-wyang, 23 hours ago:\'update\'\r\n    c944795-wyang, 2 days ago:\'add markdown\'\r\n    7be4314-wyang, 2 days ago:Merge remote-tracking branch \'origin/master\'\r\n\r\n    ## 查看全部版本号\r\n    git reflog\r\n~~~\r\n- - -\r\n取消add过的内容文件：\r\n~~~php \r\n    git reset HEAD -- test.php\r\n~~~  \r\n- - -\r\n版本回退：\r\n~~~git \r\n    git reset --hard HEAD (^/^^/~100)\r\n    git reset --hard 版本号\r\n~~~  \r\n- - -\r\n撤消合并：\r\n~~~git \r\n    git reset --merge\r\n~~~  \r\n- - -\r\n标签：\r\n~~~git \r\n    ## 给某个提交打标签\r\n    git tag **tagName** commitId\r\n    ## 查看所有标签\r\n    git tag\r\n~~~  \r\n- - -\r\n 指定本地分支dev与远程分支origin/dev链接：\r\n~~~git \r\n    git branch --set-upstream dev origin/dev\r\n~~~  \r\n- - -\r\n重新提交：\r\n~~~git \r\n    git commit --amend\r\n~~~  \r\n- - -\r\n查看工作区：\r\n~~~git \r\n    git stash list\r\n    ## 隐藏当前工作区\r\n    git stash\r\n    ## 恢复并删除stash内容  =>  恢复  +  删除\r\n    git stash pop  =>  git stash apply  +  git stash drop\r\n~~~  \r\n- - -\r\n~~~git \r\n    # 执行命令将db.php加入不提交队列\r\n    git update-index --assume-unchanged include/db.php\r\n    # 执行命令将db.php取消加入不提交队列\r\n    git update-index --no-assume-unchanged include/db.php\r\n~~~  ', 0, 1, 1505896065, 1505897152),
(4, 'OSI七层协议', 1, 100, NULL, '### OSI七层协议： ###\r\n    应用层－－> 定义应用程序传送数据的接口\r\n    表现层－－> 编码数据包\r\n    会谈层－－> 建立网络联机的确认\r\n    传送层－－> 确认封包协议（TCP、UDP）\r\n    网络层－－> 确认封包数据路由（IP）\r\n    链结层－－> 将数据包转换成MAC格式（Media Access Control） \r\n    {\r\n        IEEE 802.3 的标准 CSMA/CD (Carrier Sense Multiple Access with Collision Detection)\r\n        MAC 其实就是我们上面一直讲到的讯框 (frame)[CSMA/CD()传送出去的讯框数据] 啰！\r\n        只是这个讯框上面有两个很重要的数据，就是目标与来源的网卡卡号，因此我们又简称网卡卡号为 MAC 而已只是这个讯框上面有两个很重要的数据，就是目标与来源的网卡卡号，因此我们又简称网卡卡号为 MAC 而已\r\n    }\r\n    物理层－－> 以帧的方式发送MAC格式的数据包\r\n### TCP/IP: ###\r\n![asdfsdf](http://wyxp_admin/images/TCP&IP.png \"enter image title here\")\r\n\r\n摘自：[鸟哥的Linux私房菜](http://cn.linux.vbird.org/linux_server/0110network_basic.php)', 0, 1, 1505898260, 1505910046),
(5, 'mysql 学习笔记', 1, 9, NULL, '常见错误：\r\n>  `SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,\'ONLY_FULL_GROUP_BY\',\'\'));`\r\n\r\n默认值为：ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,\r\nERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\r\n- - -\r\n\r\n~~~mysql \r\n  ## 设置环境变量：\r\n  select @@global.socket;\r\n  show variables like \'socket\';\r\n  ## 设置最大连接时间\r\n  SET GLOBAL max_connections = 1000;\r\n  SET @@global.max_connections = 1000;\r\n  备份：mysqldump -u root -p 库.表 > 路径\r\n  导入：mysql -u root -p 库.表 < 路径\r\n~~~  \r\n\r\nwindows下手动安装MySQL：\r\n\r\n1、先将my.default.ini改名为my.ini放到bin目录\r\n\r\n\r\n2、命令行执行: mysqld --initialize --user=mysql --console\r\n\r\n3、先执行以上命令, 生成库. 注意有个临时密码, 要记下来.\r\n\r\n4、mysql bin目录输入: mysqld --install 安装服务，然后启动服务\r\n\r\n5、命令行:mysql -uroot -p\r\n\r\n6、然后我们就可以修改mysql的root密码了\r\n~~~mysql \r\n  命令行执行命令：mysqladmin -u USER -p password PASSWORD\r\n~~~  \r\n', 0, 1, 1505899837, 1505917936),
(6, 'nginx_reload.bat', 1, 100, NULL, '~~~php \r\n@echo off\r\necho Stopping nginx...\r\ntaskkill /F /IM nginx.exe > nul\r\necho Stopping PHP FastCGI...\r\ntaskkill /F /IM php-cgi.exe > nul\r\necho Starting PHP FastCGI...\r\nC:\\wnmp\\RunHiddenConsole.exe C:\\wnmp\\PHP\\php-cgi.exe -b 127.0.0.1:9000-c C:\\wnmp\\PHP\\php-cli.ini\r\necho Starting nginx...\r\nC:\\wnmp\\RunHiddenConsole.exe C:\\wnmp\\nginx\\nginx.exe -p C:\\wnmp\\nginx\r\nexit\r\n~~~  \r\n\r\n下载地址：[RunHiddenConsole.exe](/download/RunHiddenConsole.exe)', 0, 1, 1505900478, 1506050333),
(7, '几个小知识点', 1, 100, NULL, 'sublime 几个常用插件**Emmet	SublimeLinter  PackageResourceViewer  Git	 Alignment  Snippets  SublimeCodeIntel**\r\n- - -\r\nVim     ` :%s/old/new/g			替换全部的old为new`\r\n- - -\r\nRedis      `config set stop-writes-on-bgsave-error no`\r\n- - -\r\n事务\r\n~~~php\r\nstart/begin transaction;\r\n\r\nset autocommit = 0;\r\n\r\nrollback;\r\n\r\nSAVEPOINT pointName;\r\n\r\nROLLBACK TO SAVEPOINT pointName\r\n~~~', 0, 1, 1505900769, 1505908818),
(8, 'Mongo 语法', 1, 9, NULL, '新建用户并授权： `db.addUser(\"user\", \"psw\")db.auth(\"user\", \"psw\")`\r\n\r\n显示库列表：`show dbs`\r\n\r\n进数据库：`use dbname`\r\n\r\n显示表列表：`show collections`\r\n\r\n查询主从状态：`rs.status`\r\n\r\n创建库：`无需单独创建，直接use进去`\r\n\r\n创建表：`无需单独创建，直接插入数据`\r\n\r\n删除表：`db.tname.drop()`\r\n\r\n删除库：`use dbname; db.dropDatabase()`\r\n  \r\n插入记录： `db.tbname.insert({id: 2})`\r\n\r\n删除记录：`db.tbname.remove({id: 2})`\r\n\r\n修改/更新记录：`db.tbname.update({id: 2}, {$set: {id: 3}}, false, true)`\r\n  \r\n查询所有记录：`db.tbname.find()`\r\n\r\n查询所有列：`db.tbname.find({}, {id: 1})`\r\n\r\n条件查询：`db.tbname.find({id: 2})`\r\n\r\n条件查询：`db.tbname.find({id: {$lt: 2}})`\r\n\r\n条件查询：`db.tbname.find({id: {$gte: 2}})`\r\n\r\n条件查询：`db.tbname.find({id: 2, name: \'steve\'})`\r\n\r\n条件查询：`db.tbname.find($or: [{id: 2}, {name: \'steve\'}])`\r\n\r\n条件查询：`db.tbname.findOne()`\r\n  \r\n模糊查询：`db.tbname.find({name: /steve/})`\r\n\r\n模糊查询：`db.tbname.find({name: /^steve/})`\r\n  \r\n获取表记录数：`db.tbname.count()`\r\n\r\n获取有条件的记录数：`db.tbname.find({id: 2}).count()`\r\n\r\n查询时去掉重复值：`db.tbname.distinct(\'last_name\')`\r\n  \r\n正排序查询：`db.tbname.find().sort({id: 1})`\r\n\r\n逆排序查询：`db.tbname.find().sort({id: -1})`\r\n  \r\n取存储路径：`db.tbname.find({id = 3}).explain()`\r\n- - -\r\n**特别要注意的是**：mongodb插入多个字段语法\r\n>   `db.user.insert({id: 1, name: \'steve\', sex: \'male\'})`  √\r\n\r\n>   ` db.user.insert({id: 2}, {name: \'bear\'}, {sex: \'female\'})`  ×\r\n\r\nphp中使用的简单例子：\r\n~~~php\r\n$manager = new MongoDB\\Driver\\Manager(\"mongodb://admin:111111@localhost:27017\");\r\n\r\n$query = new MongoDB\\Driver\\Query([\'title\' => \'MHBJG\']);\r\n$cursor = $manager->executeQuery(\'db.tbname\', $query);\r\n\r\nforeach ($cursor as $document) {\r\n    var_dump($document);\r\n    // var_dump($document->title);\r\n}\r\n~~~', 0, 1, 1505909421, 1505909970),
(9, 'make install mysql & php', 1, 5, NULL, '~~~shell\r\n#!/bin/bash\r\n#Program:\r\n#	php & mysql installation\r\n# History:\r\n# 	2017.04.19 Wyang First release\r\n\r\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\r\nexport PATH\r\n\r\n- - -\r\n\r\n# echo \"create dirs (mysql/data, boost, softbags)...\"\r\nsudo mkdir -p /usr/local/mysql/data\r\nsudo mkdir -p /usr/local/boost\r\nsudo mkdir -p /usr/local/softbags\r\n\r\n# echo \"create user for mysql(msyql) and php(www-data)\"\r\nsudo groupadd mysql && sudo useradd mysql -g mysql\r\nsudo groupadd www-data && sudo useradd www-data -g www-data\r\n\r\n# echo \"installing dependence for mysql\"\r\nsudo apt install cmake libncurses5-dev bison  libaio1 build-essential libxml2\r\n\r\n# echo \"installing dependence for php\"\r\nsudo apt install autoconf libxml2-dev libssl-dev libcurl4-gnutls-dev libjpeg-dev libpng-dev libmcrypt-dev libreadline6 libreadline-dev libfreetype6-dev pkg-config\r\n\r\nsudo cp -r /usr/include/x86_64-linux-gnu/curl/ /usr/include/\r\n\r\n- - -\r\n\r\ncd /usr/local/softbags\r\n\r\n# download mysql-5.7.18.tar.gz		\r\nhttp://dev.mysql.com/downloads/mysql/\r\n# download boost_1_59_0.tar.gz		\r\nhttps://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz/download\r\n# download php-7.1.4.tar.gz		\r\nhttp://php.net/get/php-7.1.4.tar.gz/from/a/mirror\r\n\r\n# echo \"downloading mysql5.7.18 ...\"\r\nsudo wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18.tar.gz\r\n\r\n# echo \"downloading boost_1_59_0 ...\"\r\nsudo wget https://nchc.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz\r\n\r\n# echo \"downloading php-7.1.4 ...\"\r\nsudo wget http://cn2.php.net/distributions/php-7.1.4.tar.gz\r\n\r\n# echo \"parsing these bags ...\"\r\nsudo tar -zxf mysql-5.7.18.tar.gz\r\nsudo tar -zxf php-7.1.4.tar.gz\r\n\r\ncd /usr/local/boost/\r\nsudo cp /usr/local/softbags/boost_1_59_0.tar.gz ./\r\nsudo tar -zxf boost_1_59_0.tar.gz\r\n\r\n- - -\r\n\r\n# echo \"Install MySQL ===================================================\"\r\ncd /usr/local/softbags/mysql-5.7.18\r\n\r\nsudo cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=all -DENABLED_LOCAL_INFILE=1  -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock -DCOMPILATION_COMMENT=\"string\"-DENABLED_PROFILING=1 -DOPTIMIZER_TRACE=1 -DWITH_DEBUG=1 -DWITH_BOOST=/usr/local/softbags/boost_1_59_0\r\n\r\nsudo make && sudo make install\r\n\r\nsudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/\r\n\r\n# save the secret_temp\r\n\r\nsudo /usr/local/mysql/bin/mysqld_safe --user --defaults-file=/etc/my.cnf\r\nmysqladmin -u root -p password 111111\r\n# mysql> set password for root@localhost=password(\'新密码\');\r\n\r\n# input the secret_temp\r\n\r\nsudo chown -R mysql:mysql /usr/local/mysql\r\n\r\nsudo update-rc.d -f mysql enable\r\nsudo update-rc.d -f mysql default\r\n\r\n- - -\r\n\r\n# echo \"Install PHP =====================================================\"\r\ncd /usr/local/softbags/php-7.1.4\r\n\r\nsudo ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-fpm-user=www-data --with-fpm-group=www-data --with-openssl --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir --with-curl --with-mcrypt --with-mhash --with-mcrypt --without-pear --with-gd --with-xmlrpc --enable-mysqlnd --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-mbregex --enable-fpm --enable-mbstring --enable-gd-native-ttf --enable-pcntl --enable-sockets --enable-zip --enable-soap --enable-opcache --enable-maintainer-zts\r\n\r\nsudo make && sudo make test && sudo make install\r\n\r\n# echo \"copy php.ini ...\"\r\nsudo cp php.ini-development /usr/local/php/etc/php.ini\r\n# sudo echo \'extenson=memcache.so\' >> /usr/local/php/etc/php.ini\r\n\r\n# update mysqli.default_socket=/usr/local/mysql/data/mysql.sock\r\n# update pdo_mysql.default_socket=/usr/local/mysql/data/mysql.sock\r\n\r\nsudo cp /usr/local/php/etc/php.ini /usr/local/php/etc/php-cli.ini\r\n# sudo echo \'extenson=pthreads.so\' >> /usr/local/php/etc/php-cli.ini\r\n\r\n\r\n\r\n# echo \"copy php-fpm.conf and www.conf\"\r\ncd /usr/local/php/etc\r\nsudo cp php-fpm.conf.default php-fpm.conf\r\nsudo cp ./php-fpm.d/www.conf.default ./php-fpm.d/www.conf\r\n\r\n# update www.conf:\r\n# user = www-data\r\n# group = www-data\r\n\r\n# echo \"copy init.d.php-fpm to /etc/init\"\r\nsudo chmod 755 /usr/local/softbags/php-7.1.4/sapi/fpm/init.d.php-fpm\r\nsudo cp -a /usr/local/softbags/php-7.1.4/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\r\nsudo cp -a /usr/local/softbags/php-7.1.4/sapi/fpm/init.d.php-fpm /usr/local/php/sbin/init.d.php-fpm\r\n\r\n# echo \"link to rc5.d\"\r\ncd /etc/rc5.d\r\nsudo ln -s /etc/init.d/php-fpm && mv php-fpm S01php-fpm\r\n\r\nsudo chown -R www-data:www-data /usr/local/php\r\n\r\n# sudo /etc/init.d/php-fpm start\r\n\r\n- - -\r\n\r\n# echo \"Add to service manager\"\r\nsudo update-rc.d -f php-fpm enable\r\n# echo \"start with boot\"\r\nsudo update-rc.d -f php-fpm default\r\n\r\n- - -\r\n\r\n# echo \"Install php.memcache/php.pthreads -------------------\"\r\n\r\nsudo apt install memcached\r\n\r\n# echo \"clone pecl-memcache & pthreads ...\"\r\ncd /usr/local/softbags/\r\ngit clone https://github.com/websupport-sk/pecl-memcache.git\r\ngit clone https://github.com/krakjoe/pthreads.git\r\n\r\n# echo \"make pecl-memcache ...\"\r\ncd /usr/local/softbags/pecl-memcache\r\nsudo /usr/local/php/bin/phpize\r\nsudo ./configure --with-php-config=/usr/local/php/bin/php-config\r\nsudo make && sudo make test && sudo make install\r\n\r\n# echo \"make pthreads\"\r\ncd /usr/local/softbags/pthreads\r\nsudo /usr/local/php/bin/phpize\r\nsudo ./configure --with-php-config=/usr/local/php/bin/php-config\r\nsudo make && sudo make test && sudo make install\r\n\r\n- - -\r\n\r\n# echo \"Export Enviriament variable --------------------\"\r\n\r\nsudo echo \'export PATH=$PATH:/usr/local/php/bin:/usr/local/php/sbin:/usr/local/mysql/bin\' >> ~/.bashrc\r\nsudo echo \'export PATH\' >> ~/.bashrc\r\n~~~', 0, 1, 1505910485, 1505910485),
(10, 'mysql 语法', 1, 9, NULL, '## MySQL：关系型数据库管理系统（RDBMS） ##\r\n\r\n增加字段：`ALTER TABLE table_name ADD field_name field_type;`\r\n\r\n删除字段：`ALTER TABLE table_name DROP field_name;`\r\n\r\n添加字段：`ALTER TABLE  `user_movement_log` Add column `new_field_name` int not null default 0 AFTER `field_name`; `\r\n\r\n删除字段：`ALTER TABLE `user_movement_log` DROP column `field_name`\r\n\r\n调整字段顺序：`ALTER TABLE `user_movement_log` CHANGE `field_name` int not null default 0 AFTER `RegionID`;\r\n\r\n修改原字段名称及类型：`ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;`\r\n\r\n主键 `alter table tabelname add new_field_id int(5) unsigned default 0 not null auto_increment ,add primary key (new_field_id);`\r\n\r\n重命名表  `alter table old_table_name rename new_table_name;`\r\n\r\n- - -\r\n\r\n**添加索引：**\r\n\r\n`ALTER TABLE table_name ADD INDEX index_name (column_list)`\r\n\r\n`ALTER TABLE table_name ADD UNIQUE (column_list)`\r\n\r\n`ALTER TABLE table_name ADD PRIMARY KEY (column_list)`\r\n\r\n`CREATE INDEX index_name ON table_name (column_list)`\r\n\r\n`CREATE UNIQUE INDEX index_name ON table_name (column_list)`\r\n\r\n**删除索引：**\r\n\r\n`DROP INDEX index_name ON talbe_name`\r\n\r\n`ALTER TABLE table_name DROP INDEX index_name`\r\n\r\n`ALTER TABLE table_name DROP PRIMARY KEY`\r\n\r\n**查看索引：**\r\n\r\nmysql> `show index from tblname;`\r\n\r\nmysql> `show keys from tblname;`\r\n\r\n- - -\r\n## 权限操作 ##\r\n\r\n新建用户： `insert into mysql.user(Host, User, Password) values(\"localhost\", \"test\", password(\"1234\"));`\r\n\r\n　　*这样就创建了一个名为：test 密码为：1234 的用户。*  \r\n　　*注意：此处的\"localhost\"，是指该用户只能在本地登录，不能在另外一台机器上远程登录。如果想远程登录的话，将\"localhost\"改为\"%\"，表示在任何一台电脑上都可以登录。也可以指定某台机器可以远程登录。*  \r\n \r\n为用户授权：`grant all privileges on testDB.* to test@localhost identified by \'1234\';`\r\n\r\n授权格式：`grant 权限 on 数据库.* to 用户名@登录主机 identified by \"密码\";　`\r\n　　\r\n         mysql> `flush privileges;`    //刷新系统权限表\r\n\r\n指定部分权限给一用户：`grant select,update on testDB.* to test@localhost identified by \'1234\';`\r\n\r\n        mysql>  `flush privileges;`     //刷新系统权限表\r\n\r\n授权test用户拥有所有数据库的某些权限： `grant select,delete,update,create,drop on *.* to test@\"%\" identified by \"1234\";`\r\n\r\n        * test用户对所有数据库都有select,delete,update,create,drop 权限 *\r\n\r\n        *@\"%\" 表示对所有非本地主机授权，不包括localhost*\r\n\r\n对localhost授权：`grant all privileges on testDB.* to test@localhost identified by \'1234\';`\r\n \r\n- - -\r\n## 用户操作 ##\r\n\r\n删除用户：`Delete FROM user Where User=\'test\' and Host=\'localhost\';`\r\n\r\n         mysql>  `flush privileges;`\r\n\r\n         mysql>  `drop database testDB;`   //删除用户的数据库\r\n\r\n \r\n修改指定用户密码：`update mysql.user set password=password(\'新密码\') where User=\"test\" and Host=\"localhost\";`\r\n         mysql>  `flush privileges;`\r\n \r\n列出所有数据库：`show database;`\r\n \r\n显示数据表结构：`show create table;`\r\n\r\n- - -\r\n\r\n\r\n## 存储引擎：MyISAM, InnoDB, Memory ##\r\n\r\n**MyISAM**：由三张表组成（.frm-表格定义文件，MYD-数据文件，MYI－索引文件）\r\n\r\n1、适于select操作，适于count()命令；\r\n\r\n2、占用空间小；\r\n\r\n3、支持全文索引、GIS数据；\r\n\r\n4、可建立联合索引；\r\n\r\n5、不支持事务、只提供表级锁；\r\n\r\n**InnoDB**：\r\n\r\n1、适于insert, update操作；\r\n\r\n2、占用空间大；\r\n\r\n3、支持事务和主键和外键，安全性能好；\r\n\r\n4、提供行级锁和表级锁；\r\n\r\n5、只能单独索引；\r\n\r\n**Memory**：数据存于内存中，生命周期短，表锁\r\n\r\n- - -\r\n\r\n**索引**（是帮助MySQL高效获取数据的数据结构）：\r\n\r\n1、主键索引：primary key (`id`);\r\n\r\n2、普通索引：index/key index_title (`title`);\r\n\r\n3、联合索引：index/key index_username (`username`, `password`);\r\n\r\n4、唯一索引：unique key uk_id (`id`);\r\n\r\n- - -\r\n\r\n**行级锁**：锁行（InnoDB），适于高并发；\r\n\r\n**表级锁**：锁整张表(MyISAM)；\r\n\r\n**排它锁**：也称写锁，只能一个事务持有，可读可写，期间其它事务不能读写；\r\n\r\n**共享锁**：也称读锁，每个事务都可持有，期间只能读，都不能写；\r\n\r\n**悲观锁**：操作数据时，默认自加锁，如数据被其它程序占用，加锁失败，无法操作；\r\n\r\n**乐观锁**：操作数据时，通过版本对比，确认此操作的有效性；', 0, 1, 1505912062, 1505912304),
(11, 'pthreads', 1, 4, NULL, '摘自：[张宴的博客](http://zyan.cc/pthreads/)\r\n~~~php\r\n<?php\r\n  class test_thread_run extends Thread \r\n  {\r\n      public $url;\r\n      public $data;\r\n\r\n      public function __construct($url)\r\n      {\r\n          $this->url = $url;\r\n      }\r\n\r\n      public function run()\r\n      {\r\n          if(($url = $this->url))\r\n          {\r\n              $this->data = model_http_curl_get($url);\r\n          }\r\n      }\r\n  }\r\n\r\n  function model_thread_result_get($urls_array) \r\n  {\r\n      foreach ($urls_array as $key => $value) \r\n      {\r\n          $thread_array[$key] = new test_thread_run($value[\"url\"]);\r\n          $thread_array[$key]->start();\r\n      }\r\n\r\n      foreach ($thread_array as $thread_array_key => $thread_array_value) \r\n      {\r\n          while($thread_array[$thread_array_key]->isRunning())\r\n          {\r\n              usleep(10);\r\n          }\r\n          if($thread_array[$thread_array_key]->join())\r\n          {\r\n              $variable_data[$thread_array_key] = $thread_array[$thread_array_key]->data;\r\n          }\r\n      }\r\n      return $variable_data;\r\n  }\r\n\r\n  function model_http_curl_get($url,$userAgent=\"\") \r\n  {\r\n      $userAgent = $userAgent ? $userAgent : \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2)\'; \r\n      $curl = curl_init();\r\n      curl_setopt($curl, CURLOPT_URL, $url);\r\n      curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\r\n      curl_setopt($curl, CURLOPT_TIMEOUT, 5);\r\n      curl_setopt($curl, CURLOPT_USERAGENT, $userAgent);\r\n      $result = curl_exec($curl);\r\n      curl_close($curl);\r\n      return $result;\r\n  }\r\n\r\n  for ($i=0; $i < 100; $i++) \r\n  { \r\n      $urls_array[] = array(\"name\" => \"baidu\", \"url\" => \"http://www.baidu.com/s?wd=\".mt_rand(10000,20000));\r\n  }\r\n\r\n  $t = microtime(true);\r\n  $result = model_thread_result_get($urls_array);\r\n  $e = microtime(true);\r\n  echo \"多线程：\".($e-$t).\"\\n\";\r\n\r\n  $t = microtime(true);\r\n  foreach ($urls_array as $key => $value) \r\n  {\r\n      $result_new[$key] = model_http_curl_get($value[\"url\"]);\r\n  }\r\n  $e = microtime(true);\r\n  echo \"For循环：\".($e-$t).\"\\n\";\r\n~~~', 0, 1, 1505912504, 1505912504),
(12, '摘自网络某大神的语录', 1, 100, NULL, '        在撰写此文前首先必须申明的是本人不鄙视任何一种框架，也无意于挑起PHP框架间的战争，更没有贬低某个框架使用者的用意，本文纯粹个人的看法。你可以认为我无知也好，或者装逼也好，请不要试着在任何情况下，随便发起言语的攻击，这只是我个人的一些经验而已，你可以选择赞成或不赞成，也可以选择看与不看。\r\n\r\n        还有本人基本对这些框架中的大部分都用的时间比较长，绝对不是随便出个Hello World!就在这里评论，曾任某某底层本土公司的技术总监，某某所谓巨头公司的IOS架构师和PHP高级程序员，XX外资创业企业的项目经理，基本上在这些职位工作期间基本上对大部分这里提到的PHP框架使用的都比较深入，也曾参与或主办过这些公司的招聘，现在虽然在创业，但是人才需求也是按照本文来的。写这篇文章的目的不在于跟阅读者挑起任何语言战争，只是希望给正在路上的PHPER提供一条适合自己的道路，如果你要骂SB，请到其他处，OK？对你没帮助你可以不看的。\r\n\r\n        好了开始我的分析吧。。。\r\n- - -\r\n        第一种境界:学院主义—无框架型\r\n\r\n        这是一个PHP语言的入门时期，也许也是你编程生涯的开始，可能你在读大学或者在培训部培训的初期，这个时候你正在吭HTML5,CSS3,JS,Jquery还有对于你现在来说最重要的，应该学的东西PHP+Mysql。这个是你建立好的雏形的良好时机，也是最容易放弃的最难时期，并且决定你后面所有的编程职业生涯，前提是你真的想从事编程职业。\r\n\r\n        常说的语言及做的事情:这个好难，太难搞了;我要考这个认证，对将来工作有帮助;找个单位实习下;接个项目练练手\r\n        对各种付费虚拟产品的态度(如付费课程,付费服务器等)：买不起啊。。。学费都花了这么多，我还是找免费的吧或者能不能便宜点啊\r\n        薪资水平:1.5k左右\r\n        公司职位:实习生\r\n        基本技能:html5,css3,js,jquery\r\n        操作系统:windows xp,windows 7,windows 8\r\n        编程工具:dreamweaver,eclipse,netbeans,editplus\r\n        PHP框架:无框架概念\r\n        占据人数:20%\r\n- - -\r\n        第二种境界:屌丝主义—快速原型框架\r\n        \r\n        这个时候你已经从学校或培训部毕业随之而来的劣性发展成就了这个境界，这个境界的程序员占据了PHPER人数 40%以上。为什么说是屌丝主义？经过前期的培训部速成培训(这个境界大部分是XXX100，XXX兄弟连等出来的)，你基本掌握了一些国内的CMS的使用与二次开发，以及一些类似Thinkphp,Codeigniter,Brophp等低层次框架的开发，并且去一些不怎么样的所谓创业公司或者大部分去了一些企业网站制作公司做一些企业网站，小模块，小系统的开发，然后你会说我好强大，认为PHP也就全会了，做了井底之蛙。。。崇尚quick and dirty。也就是这部分在国外不存在的人导致了PHP在国内长期被Rails,Nodejs等使用者鄙视。\r\n        语言行为及特征状态:\r\n        \r\n        看不懂任何英语技术，英语文档，凡事没有培训部在搞的，只有英文文档的东西国内一律没大公司在用，都非主流，排斥英文文档和新技术，以及各种超出他学习能力范围的技术。\r\n\r\n        不知道的技术一律会说，这些技术没有公司或者很少公司在用，谁要学。。。，大公司都是自己开发框架的。。。。\r\n        比如 Angularjs,Emberjs,Hadoop,Mongodb,Nodejs,Rails,Requirejs等有点极客的都没听说过，然后会认为Java,.NET这种是企业级，C语言算法才是王道，用的公司多，真正的高手用C扩展PHP的，我想说别他妈这么屌丝好吗，你个XXX，我想说请你睁眼看看世界，好吗？别动不动别人说些你不懂的就说JAVA，C算法，数据结构这些，你懂吗，你个屌丝一枚的。。。你的垃圾公司没在用，不证明其它好的公司没在用，不是大家都用TP和CI的，OK？就知道php+mysql了？\r\n\r\n        对真懂PHP的人的态度\r\n\r\n        TP很给力啊，能开发的话什么框架都无所谓，技术高你就自己开发一个啊\r\n        你自己什么都不懂还来装逼\r\n        TP够用了，CI够用了\r\n        你有本事用C扩展个框架啊，SB\r\n        对各种付费虚拟产品的态度(如付费课程,付费服务器等)\r\n        广告，X你ma\r\n        收费的视频课程谁要，SB\r\n        免费空间，免费主机找找看\r\n        用开源的东西收费，无耻\r\n        喜欢用虚拟主机，只选择PHP5.2的空间上架或者用windows服务器\r\n        喜欢windows，认为用mac的都是装逼\r\n        认为只有兼容所有浏览器，至少也要支持IE8的才是正常的网站\r\n        让他付钱，他宁愿死\r\n        操作系统:windows xp,windows 7,windows 8\r\n        使用的技能：Discuz,DEDECMS，Thinkphp,Yii Framework1,Codeigniter,Jquery…\r\n        PHP框架：Thinkphp,Codeigniter\r\n        所在公司：做企业站，做地方门户，做行业门户，做管理系统等\r\n        经常去的网站：CI中国，PHP100，Thinkphp官网,phpchina,discuz官方论坛,dedecms论坛等\r\n        编程工具:dreamweaver,eclipse,notpad++,editplus,EclipsePHP Studio(就xxx100那个垃圾出的工具)\r\n        薪资待遇：2.5k-5k\r\n        占据人数：40%\r\n- - -\r\n        第三种境界：崇拜主义—全栈型框架\r\n\r\n        这部分人一般都是大学本科以上毕业，非培训部速成。但是由于前期也是很薄弱，学校里老师教的可能还不如速成培训部的，所以除了观念的不同，大部分实用技术不如速成培训部出来的。但是观念基本决定了后面走的路不一样。这部分人当中大部分转了IOS,Rails等技术甚至一大半都转行了，甚于一小部分进入了PHPER行列。因为在学校英文都是过了一定等级的，看基本的英文文档还是比较可以，再加上可能由于学历限制去了一些比较还可以的公司，从基础程序员甚至实习生做起，还可以的公司一般都会使用大量只有英文文档的技术，比如我以前一个同事刚毕业的时候去应聘一个新美合资PHP工程师的职位，要求就是懂Agavi框架，还要懂前端的restful框架-backbone,其实那时候backbone刚出来还不错的。然后就在试用期死啃这两个框架，因为有大量比较散的中文文档，所以终于吭懂了，以后看其它部分中英文都有点的文档等基本也可以尝试看看了，但是毕竟也能通过半英语学习了，然后进步都是很快。但是一个悲催的转折点又来了，这时候就看你的选择了。\r\n\r\n        是什么转折点呢？就是对某一个框架(这里框架只是某种技术的狭义说法)出现了比较大的喜欢程度，而且这个框架也基本中文文档不全，但是用的中小型有新意的创业型公司，外资企业，合资企业都蛮多的，薪资待遇也还不错，尤其那些不能看英文文档的人让他获得了优越感，再加上这些框架本身都是基于composer包,php-fig最新标准等发布的，并且学习使用也不是很复杂，深深的让他喜欢上了此款框架，在这个时候基本上出于已经产生的西方主义的好奇心，他已经掌握了一些类似bootstrap,backbone等简单的前端UI技术以及轻量MV*框架，这个时候也许真的是做什么项目，只要是web，他都可以做了，并且出于中小型高端企业的要求，他需要会的还有Linux服务器的各种架设比如web服务器，邮件服务器等，这个时候基本上他如果有客户资源自己都可以做产品创业了。所以转则点就是他这个时候选择不思进取(当然创业不算，因为创业者是最牛逼的)，一直用他掌握的框架迅速的开发各种东西，还是学新的框架？如果是前者，将导致他永久的崇拜一个比较简单的全栈框架，然后永久的等待这个框架的新版本发布，而不会转移视线，更别说学新的东西了，这样基本上升就很困难了，比如说用larvel框架，那么别人跟你说zf2,sf2，你会说太复杂的东西不好，太复杂的东西不适合我。。。请改进一步吧，会有更尖端的东西等着你\r\n\r\n        对各种付费虚拟产品的态度(如付费课程,付费服务器等)\r\n\r\n        不需要课程了，谢谢，我用xxx就够了，那个太复杂不适合我\r\n        嗯，我正在找这个视频，买的，自己看这么复杂的文档太累\r\n        阿里云还是不错的\r\n        代码放Ucloud，静态资源放七牛吧\r\n        感觉BAE不错\r\n        使用的技能:bootstrap,jquery-mobile,zurb foundation,backbone,laravel4/zf1/cakephp/fuelphp/Yii2,Linux服务器等\r\n        PHP框架：laravel4,zend framework1,cakephp,fuelphp,Yii Framework2\r\n        操作系统:windows 7,windows 8,mac osx,linux\r\n        所在公司：电子商务，门户媒体，社交网络，各类创新型网站等\r\n        编程工具：sublime Text,PHPstorm,vim\r\n        经常去的网站：segmentfault，德问，v2ex,ruby-china,github,cnode等\r\n        薪资待遇：6k-10k\r\n        占据人数：25%\r\n- - -\r\n        第四种境界：完美主义—组件型框架\r\n\r\n        一般这个境界的PHP程序员基本处于一种完美状态了，基本上一个人能完成一个项目所有的东西，包括前端(前端可以设计的非常潮或者说fashion),后端，已经服务器的架设优化，包括云计算底层的开发，各种虚拟化的东西，比如KVM等，基本已经掌握各种开发，但是开发经验不一定就多，年龄不会超过30，基本会各种技术，移动，底层，前端，后端，mac,linux什么的都可以拿起就玩，会用最屌的开发工具—emacs进行自己的编码，崇尚完美主义，喜欢把用户体验和架构都做的一点瑕疵都没有，比如一个颜色的调度课程都要花去他一整天的功夫，但是在团队开发面前，更能发挥出这个境界的威力，因为还没达到第五种神的境界，所以过于最求强大，不仅会带来项目时间上的硬伤，也会给项目带来超级大的成本花费，包括学员的学习成本，强大的框架需要的维护成本等等。适合在一些比较大的巨头企业或者大公司或者外资创业企业做项目领导或者首席架构等职位，单论技术，已经在PHP方面可以算是很强大了。你需要会的是学习期至少一年多到两年的symfony2框架，而不是几天就会的laravel，所以花费的学习成本是极其大的，承担的风险也大，一般在这个境界的PHP程序员，国内并不多，但是也不是很少，这个阶段的程序员一般都是从其它编程语言转过来的，比如rails或者nodejs或者Python等，但是java和.net由于本身就不符合极客的历史潮流，转换到PHP已经无法到这里了，一般直接转屌丝码农境界去了。rails或node等转过来的程序员一般都理解依赖注入，监听器，过滤器等等技术面，并且node里的npm和rails里的gem与php的composer是一样的，sf2和zf2的bundle机制也是与rails相同的，所以导致了rails程序员一转3，4个月就会sf2的情况，再加上zf2和sf2本身没中文文档，所以必须是英文比较好的才能学会，尤其sf2，有book,cookbook,refenrencebook,componentbook，bundlesbook等等,而且必须用几十个第三方bundle才能完成一个真正意义上的应用，复杂度是难以想象的，但是复杂的东西有其强大之处，比如hwioauthbundle,fosuserbundle,fosrestbundle等，都是非常不错的，fosrestbundle中根据group加载关联推到rest，而不必全部加载关联数据就是个很不错的例子，而asseticbundle直接可以合并压缩js和css,并且基于node的组件，更是把sf2的强大发挥的淋漓尽致，但是每个bundle的学习成本基本比学整个laravel4框架难度还大，而且全是github的wiki没有任何中文，这就不但加大了技术学习成本也加大了语言学习成本，所以到达这个境界需要无比的毅力和探索的好奇心，两者缺一不可。\r\n\r\n        对各种付费虚拟产品的态度(如付费课程,付费服务器等)\r\n        嗯，有需要，课程买好了,有空看看哦\r\n        udemy上的课程做的很不错，一般$99的课程都不错的，我买了Rails\r\n        我觉得paas比较好，国内paas都不给力啊\r\n        感觉qingcloud很不错，一直在用\r\n\r\n        使用的技能：\r\n        前端:Anauglar/ember/backbone,jquery,bootstrap/foundation,Sass,Scss,Less…各种restful技术\r\n        后端:Symfony2/Zend Framework2,Rails,Nodejs\r\n        运维Linux玩的超级熟练,Mongodb,Mysql已经Redis,Nginx等不管web还是其它服务器都能架设，优化并维护，还有各种虚拟化KVM等\r\n        底层:还不给力\r\n        移动:一般以IOS开发的居多，可能会有安卓的开发\r\n        HTML5:Sencha Touch等这些框架随便玩玩\r\n        PHP框架：symfony2,zend framework2\r\n        所在公司：各类创新型网站,移动开发,云计算web层开发(可能兼顾底层)等\r\n        经常去的网站：stackoverflow,google,github等\r\n        编程工具:sublime text , emacs,text mate\r\n        薪资待遇：11k-15k\r\n        占据人数：10%\r\n- - -\r\n        第五种境界：极客主义—微型框架\r\n\r\n        请注意：这种境界必须经过前面的第四种境界才能到达\r\n        这个境界不必多说，相信仁者见仁，智者见智了。第二种境界的码农会说这个连他们都不如，但是第四种境界的高手会对他们膜拜，只就是极客的魅力，只让高手膜拜。微型框架之所以有这个效应是因为你学框架本身，一晚上就会，你要用的像个极客，也许难度早已超出你的想象，是第四种境界的好几倍，比如你要restful，随随便便调用一下，symfony2的组件再通过组件调用fosrestbundle,直接就可以写rest服务器了，如果你是菜鸟，就会直接返回json，这就是微型框架高明之处，神与菜鸟就一念之隔。不多说自己体会。只有一个比喻，还记得神雕侠侣吗？第三种境界就是独孤求败30岁前用的锋利无比的剑，第四种境界就是他中年用的也是杨过后来用的重80斤却不开锋的剑，第五种境界就是他晚年用的木剑，其实是回归原始无剑胜有剑了，此时不需要什么强大的了，微型框架各种引入(别跟我最后来一句牛人自己开发框架，OK？那是傻逼产生垃圾做的东西)，都是神的。。。。。。。\r\n\r\n        只能说你的薪资不低于20k了，如果是这个境界，也可以自己选择创业哦。', 0, 1, 1505912999, 1505913171),
(13, 'window.location', 1, 8, NULL, '设置或获取对象指定的文件名或路径：`alert(window.location.pathname)`\r\n\r\n设置或获取整个 URL 为字符串：`alert(window.location.href);`\r\n\r\n设置或获取与 URL 关联的端口号码：`alert(window.location.port)`\r\n\r\n设置或获取 URL 的协议部分：`alert(window.location.protocol)`\r\n\r\n设置或获取 href 属性中在井号“#”后面的分段：`alert(window.location.hash)`\r\n\r\n设置或获取 location 或 URL 的 hostname 和 port 号码：`alert(window.location.host)`\r\n\r\n设置或获取 href 属性中跟在问号后面的部分：`alert(window.location.search)`\r\n\r\n获取变量的值(截取等号后面的部分)\r\n~~~php\r\n var url = window.location.search;\r\n//    alert(url.length);\r\n//    alert(url.lastIndexOf(\'=\'));\r\nvar loc = url.substring(url.lastIndexOf(\'=\')+1, url.length);\r\n~~~\r\n用来得到当前网页的域名：`document.domain;`', 0, 1, 1505913428, 1505913428),
(14, 'Redis 语法', 1, 9, NULL, '**以下内容摘自网络：**\r\n\r\n**phpredis是php的一个扩展，效率是相当高有链表排序功能，对创建内存级的模块业务关系很有用;以下是redis官方提供的命令使用技巧:**\r\n\r\n#### 下载地址如下： ####\r\n[https://github.com/owlient/phpredis](https://github.com/owlient/phpredis)（支持redis 2.0.4）\r\n\r\nRedis::__construct  构造函数\r\n\r\n`$redis = new Redis();`\r\n\r\n\r\n#### connect, open 链接redis服务 ####\r\n\r\n参数：\r\n\r\n`host: string`，服务地址;\r\n\r\n`port: int`,端口号;\r\n\r\n`timeout: float`, 链接时长 (可选, 默认为 0 ，不限链接时间)\r\n\r\n***注: 在redis.conf中也有时间，默认为300***\r\n\r\n`pconnect, popen` 不会主动关闭的链接\r\n\r\n`setOption` 设置redis模式\r\n\r\n`getOption` 查看redis设置的模式\r\n\r\n`ping` 查看连接状态\r\n\r\n`get` 得到某个key的值（string值）\r\n\r\n*如果该key不存在，return false*\r\n\r\n`set` 写入key 和 value（string值）\r\n\r\n*如果写入成功，return ture*\r\n\r\n`setex` 带生存时间的写入值\r\n\r\n`$redis->setex(\'key\', 3600, \'value\'); `// *sets key → value, with 1h TTL.*\r\n\r\n`setnx` 判断是否重复的，写入值\r\n\r\n`$redis->setnx(\'key\', \'value\');`\r\n\r\n`$redis->setnx(\'key\', \'value\');`\r\n\r\n`delete`  删除指定key的值\r\n\r\n*返回已经删除key的个数（长整数）*\r\n\r\n`$redis->delete(\'key1\', \'key2\');`\r\n\r\n`$redis->delete(array(\'key3\', \'key4\', \'key5\'));`\r\n\r\n`ttl`  得到一个key的生存时间\r\n\r\n`persist`  移除生存时间到期的key\r\n\r\n*如果key到期 true 如果不到期 false*\r\n\r\n`mset` （redis版本1.1以上才可以用）同时给多个key赋值\r\n\r\n`$redis->mset(array(\'key0\' => \'value0\', \'key1\' => \'value1\'));`\r\n\r\n- - -\r\n\r\n`multi, exec, discard `  进入或者退出事务模式\r\n\r\n参数可选 `Redis::MULTI` 或 `Redis::PIPELINE`. 默认是 `Redis::MULTI`\r\n\r\n`Redis::MULTI`：将多个操作当成一个事务执行\r\n\r\n`Redis::PIPELINE`：让（多条）执行命令简单的，更加快速的发送给服务器，但是没有任何原子性的保证\r\n\r\n`discard`：删除一个事务\r\n\r\n`multi()`，返回一个redis对象，并进入 `multi-mode` 模式，一旦进入 `multi-mode` 模式，以后调用的所有方法都会返回相同的对象，只到 `exec()` 方法被调用。\r\n\r\n`watch, unwatch`    监测一个key的值是否被其它的程序更改。\r\n\r\n*如果这个key在watch 和 exec （方法）间被修改，这个 MULTI/EXEC 事务的执行将失败（return false）*\r\n\r\n`unwatch`  取消被这个程序监测的所有key\r\n\r\n*参数，一对key的列表*\r\n\r\n`$redis->watch(\'x\');`\r\n\r\n`$ret = $redis->multi() ->incr(\'x\') ->exec();`\r\n\r\n`exists`：判断key是否存在。存在 true 不在 false\r\n\r\n`incr, incrBy`：key中的值进行自增1，如果填写了第二个参数，者自增第二个参数所填的值\r\n\r\n`$redis->incr(\'key1\');`\r\n\r\n`$redis->incrBy(\'key1\', 10);`\r\n\r\n`decr, decrBy`：做减法，使用方法同incr\r\n\r\n`getMultiple`：传参：由key组成的数组\r\n\r\n*返回参数：如果key存在返回value，不存在返回false*\r\n\r\n`$redis->set(\'key1\', \'value1\'); `\r\n\r\n`$redis->set(\'key2\', \'value2\'); `\r\n\r\n`$redis->set(\'key3\', \'value3\'); `\r\n\r\n`$redis->getMultiple(array(\'key1\', \'key2\', \'key3\'));`\r\n\r\n`$redis->lRem(\'key1\', \'A\', 2);`\r\n\r\n`$redis->lRange(\'key1\', 0, -1)`\r\n\r\n- - -\r\n\r\n## list相关操作 ##\r\n\r\n`$redis->lPush(key, value)`：在名称为key的list左边（头）添加一个值为value的 元素\r\n\r\n`$redis->rPush(key, value)`：在名称为key的list右边（尾）添加一个值为value的 元素\r\n\r\n**lPushx/rPushx**\r\n\r\n`$redis->lPushx(key, value)`：在名称为key的list左边(头)/右边（尾）添加一个值为value的元素,如果value已经存在，则不添加\r\n\r\n**lPop/rPop**\r\n\r\n`$redis->lPop(\'key\')`：输出名称为key的list左(头)起/右（尾）起的第一个元素，删除该元素\r\n\r\n**blPop/brPop**\r\n\r\n`$redis->blPop(\'key1\', \'key2\', 10)`：lpop命令的block版本。即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果timeout>0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对keyi+1开始的list执行pop操作\r\n\r\n`$redis->lSize(\'key\')`：返回名称为key的list有多少个元素\r\n\r\n**lIndex, lGet**\r\n\r\n`$redis->lGet(\'key\', 0)`：返回名称为key的list中index位置的元素\r\n\r\n`$redis->lSet(\'key\', 0, \'X\')`：给名称为key的list中index位置的元素赋值为value\r\n\r\n**lRange, lGetRange**\r\n\r\n`$redis->lRange(\'key1\', 0, -1)`：返回名称为key的list中start至end之间的元素（end为 -1 ，返回所有）\r\n\r\n**lTrim, listTrim**\r\n\r\n`$redis->lTrim(\'key\', start, end)`：截取名称为key的list，保留start至end之间的元素\r\n\r\n**lRem, lRemove**\r\n\r\n`$redis->lRem(\'key\', \'A\', 2)`：删除count个名称为key的list中值为value的元素。count为0，删除所有值为value的元素，count>0从头至尾删除count个值为value的元素，count<0从尾到头删除|count|个值为value的元素\r\n\r\n`lInsert`：在名称为为key的list中，找到值为pivot 的value，并根据参数Redis::BEFORE | Redis::AFTER，来确定，newvalue 是放在 pivot 的前面，或者后面。如果key不存在，不会插入，如果 pivot不存在，return -1\r\n~~~php\r\n$redis->delete(\'key1\'); \r\n$redis->lInsert(\'key1\', Redis::AFTER, \'A\', \'X\'); \r\n$redis->lPush(\'key1\', \'A\'); \r\n$redis->lPush(\'key1\', \'B\'); \r\n$redis->lPush(\'key1\', \'C\'); \r\n$redis->lInsert(\'key1\', Redis::BEFORE, \'C\', \'X\');\r\n$redis->lRange(\'key1\', 0, -1);\r\n$redis->lInsert(\'key1\', Redis::AFTER, \'C\', \'Y\');\r\n$redis->lRange(\'key1\', 0, -1);\r\n$redis->lInsert(\'key1\', Redis::AFTER, \'W\', \'value\');\r\n~~~\r\n`rpoplpush`：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部\r\n~~~php\r\n$redis->delete(\'x\', \'y\');\r\n$redis->lPush(\'x\', \'abc\');\r\n $redis->lPush(\'x\', \'def\'); \r\n$redis->lPush(\'y\', \'123\'); \r\n$redis->lPush(\'y\', \'456\'); // move the last of x to the front of y.\r\nvar_dump($redis->rpoplpush(\'x\', \'y\'));\r\nvar_dump($redis->lRange(\'x\', 0, -1));\r\nvar_dump($redis->lRange(\'y\', 0, -1)); \r\n输出：\r\nstring(3) \"abc\" \r\narray(1) { [0]=> string(3) \"def\" } \r\narray(3) { [0]=> string(3) \"abc\" [1]=> string(3) \"456\" [2]=> string(3) \"123\" }\r\n~~~\r\n\r\n- - -\r\n\r\n## SET操作相关 ##\r\n\r\n`sAdd`：向名称为key的set中添加元素value,如果value存在，不写入，return false\r\n\r\n`$redis->sAdd(key , value)`\r\n\r\n`sRem, sRemove`：删除名称为key的set中的元素value\r\n~~~php\r\n$redis->sAdd(\'key1\' , \'set1\');\r\n$redis->sAdd(\'key1\' , \'set2\');\r\n$redis->sAdd(\'key1\' , \'set3\');\r\n$redis->sRem(\'key1\', \'set2\');\r\n~~~\r\n`sMove`：将value元素从名称为srckey的集合移到名称为dstkey的集合\r\n\r\n`$redis->sMove(seckey, dstkey, value)`\r\n\r\n`sIsMember, sContains`：名称为key的集合中查找是否有value元素，有ture 没有 false\r\n\r\n`$redis->sIsMember(key, value)`\r\n\r\n`sCard, sSize`：返回名称为key的set的元素个数\r\n\r\n`sPop`：随机返回并删除名称为key的set中一个元素\r\n\r\n`sRandMember`：随机返回名称为key的set中一个元素，不删除\r\n\r\n`sInter`：求交集\r\n\r\n`sInterStore`：求交集并将交集保存到output的集合\r\n\r\n`$redis->sInterStore(\'output\', \'key1\', \'key2\', \'key3\')`\r\n\r\n`sUnion`：求并集\r\n\r\n`$redis->sUnion(\'s0\', \'s1\', \'s2\');`\r\n*s0,s1,s2 同时求并集*\r\n\r\n`sUnionStore`：求并集并将并集保存到output的集合\r\n\r\n`$redis->sUnionStore(\'output\', \'key1\', \'key2\', \'key3\')`\r\n\r\n`sDiff`：求差集\r\n\r\n`sDiffStore`：求差集并将差集保存到output的集合\r\n\r\n`sMembers, sGetMembers`：返回名称为key的set的所有元素\r\n\r\n`sort`：排序，分页等\r\n\r\n参数\r\n~~~php\r\n\'by\' => \'some_pattern_*\',\r\n\'limit\' => array(0, 1),\r\n\'get\' => \'some_other_pattern_*\' or an array of patterns,\r\n\'sort\' => \'asc\' or \'desc\',\r\n\'alpha\' => TRUE,\r\n\'store\' => \'external-key\'\r\n~~~\r\n例子：\r\n~~~php\r\n$redis->delete(\'s\'); $redis->sadd(\'s\', 5); $redis->sadd(\'s\', 4); $redis->sadd(\'s\', 2); $redis->sadd(\'s\', 1); $redis->sadd(\'s\', 3);\r\nvar_dump($redis->sort(\'s\')); // 1,2,3,4,5\r\nvar_dump($redis->sort(\'s\', array(\'sort\' => \'desc\'))); // 5,4,3,2,1\r\nvar_dump($redis->sort(\'s\', array(\'sort\' => \'desc\', \'store\' => \'out\'))); // (int)5\r\n ~~~\r\n\r\n**string命令：**\r\n\r\n`getSet`：返回原来key中的值，并将value写入key\r\n~~~php\r\n$redis->set(\'x\', \'42\');\r\n$exValue = $redis->getSet(\'x\', \'lol\'); // return \'42\', replaces x by \'lol\'\r\n$newValue = $redis->get(\'x\')\' // return \'lol\'\r\n~~~\r\n\r\n`append,string`：名称为key的string的值在后面加上value\r\n~~~php\r\n$redis->set(\'key\', \'value1\');\r\n$redis->append(\'key\', \'value2\');\r\n$redis->get(\'key\');\r\n~~~\r\n\r\n`getRange` ：返回名称为key的string中start至end之间的字符\r\n~~~php\r\n$redis->set(\'key\', \'string value\');\r\n$redis->getRange(\'key\', 0, 5);\r\n$redis->getRange(\'key\', -5, -1);\r\n~~~\r\n\r\n`setRange`：改变key的string中start至end之间的字符为value\r\n~~~php\r\n$redis->set(\'key\', \'Hello world\');\r\n$redis->setRange(\'key\', 6, \"redis\");\r\n$redis->get(\'key\');\r\n~~~\r\n\r\n`strlen`：得到key的string的长度\r\n\r\n`$redis->strlen(\'key\')`\r\n\r\n`getBit/setBit`：返回2进制信息\r\n\r\n- - -\r\n## zset（sorted set）操作相关： ##\r\n\r\n`zAdd(key, score, member)`：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。\r\n~~~php\r\n$redis->zAdd(\'key\', 1, \'val1\');\r\n$redis->zAdd(\'key\', 0, \'val0\');\r\n$redis->zAdd(\'key\', 5, \'val5\');\r\n$redis->zRange(\'key\', 0, -1); // array(val0, val1, val5)\r\n~~~\r\n\r\n`zRange(key, start, end,withscores)`：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素\r\n~~~php\r\n$redis->zAdd(\'key1\', 0, \'val0\');\r\n$redis->zAdd(\'key1\', 2, \'val2\');\r\n$redis->zAdd(\'key1\', 10, \'val10\');\r\n$redis->zRange(\'key1\', 0, -1); // with scores $redis->zRange(\'key1\', 0, -1, true);\r\n~~~\r\n\r\n**zDelete, zRem**\r\n\r\n`zRem(key, member) `：删除名称为key的zset中的元素member\r\n~~~php\r\n$redis->zAdd(\'key\', 0, \'val0\');\r\n$redis->zAdd(\'key\', 2, \'val2\');\r\n$redis->zAdd(\'key\', 10, \'val10\');\r\n$redis->zDelete(\'key\', \'val2\');\r\n$redis->zRange(\'key\', 0, -1); \r\n~~~\r\n\r\n`zRevRange(key, start, end,withscores)`：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素.withscores: 是否输出socre的值，默认false，不输出\r\n~~~php\r\n$redis->zAdd(\'key\', 0, \'val0\');\r\n$redis->zAdd(\'key\', 2, \'val2\');\r\n$redis->zAdd(\'key\', 10, \'val10\');\r\n$redis->zRevRange(\'key\', 0, -1); // with scores $redis->zRevRange(\'key\', 0, -1, true);\r\n~~~\r\n\r\n**zRangeByScore, zRevRangeByScore**\r\n\r\n`$redis->zRangeByScore(key, star, end, array(withscores， limit )) `：返回名称为key的zset中score >= star且score <= end的所有元素\r\n\r\n`$redis->zCount(key, star, end)`：返回名称为key的zset中score >= star且score <= end的所有元素的个数\r\n\r\n**zRemRangeByScore, zDeleteRangeByScore**\r\n\r\n`$redis->zRemRangeByScore(\'key\', star, end)`：删除名称为key的zset中score >= star且score <= end的所有元素，返回删除个数\r\n\r\n`zSize, zCard`：返回名称为key的zset的所有元素的个数\r\n\r\n`$redis->zScore(key, val2)`：返回名称为key的zset中元素val2的score\r\n\r\n**zRank, zRevRank**\r\n\r\n`$redis->zRevRank(key, val)`：返回名称为key的zset（元素已按score从小到大排序）中val元素的rank（即index，从0开始），若没有val元素，返回“null”。\r\n*zRevRank 是从大到小排序*\r\n\r\n`$redis->zIncrBy(\'key\', increment, \'member\')`：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment\r\n\r\n**zUnion/zInter**\r\n\r\n参数：keyOutput、arrayZSetKeys、arrayWeights、aggregateFunction Either \"SUM\", \"MIN\", or \"MAX\": defines the behaviour to use on duplicate entries during the zUnion.\r\n\r\n对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。\r\n\r\n- - -\r\n## Hash操作 ##\r\n\r\n`$redis->hSet(\'h\', \'key1\', \'hello\')`：向名称为h的hash中添加元素key1—>hello\r\n\r\n`$redis->hGet(\'h\', \'key1\')`：返回名称为h的hash中key1对应的value（hello）\r\n\r\n`$redis->hLen(\'h\')`：返回名称为h的hash中元素个数\r\n\r\n`$redis->hDel(\'h\', \'key1\')`：删除名称为h的hash中键为key1的域\r\n\r\n`$redis->hKeys(\'h\')`：返回名称为key的hash中所有键\r\n\r\n`$redis->hVals(\'h\')`：返回名称为h的hash中所有键对应的value\r\n\r\n`$redis->hGetAll(\'h\')`：返回名称为h的hash中所有的键（field）及其对应的value\r\n\r\n`$redis->hExists(\'h\', \'a\')`：名称为h的hash中是否存在键名字为a的域\r\n\r\n`$redis->hIncrBy(\'h\', \'x\', 2)`：将名称为h的hash中x的value增加2\r\n\r\n`$redis->hMset(\'user:1\', array(\'name\' => \'Joe\', \'salary\' => 2000))`：向名称为key的hash中批量添加元素\r\n\r\n`$redis->hmGet(\'h\', array(\'field1\', \'field2\'))`：返回名称为h的hash中field1,field2对应的value\r\n\r\n- - -\r\n## redis 操作相关 ##\r\n\r\n`flushDB`：清空当前数据库\r\n\r\n`flushAll`：清空所有数据库\r\n\r\n`randomKey`：随机返回key空间的一个key\r\n\r\n`$key = $redis->randomKey()`\r\n\r\n`select`：选择一个数据库\r\n\r\n`move`：转移一个key到另外一个数据库\r\n~~~php\r\n$redis->select(0); // switch to DB 0\r\n$redis->set(\'x\', \'42\'); // write 42 to x\r\n$redis->move(\'x\', 1); // move to DB 1\r\n$redis->select(1); // switch to DB 1\r\n$redis->get(\'x\'); // will return 42\r\n~~~\r\n\r\n`rename, renameKey`：给key重命名\r\n~~~php\r\n$redis->set(\'x\', \'42\');\r\n$redis->rename(\'x\', \'y\');\r\n$redis->get(\'y\'); // → 42\r\n$redis->get(\'x\'); // → `FALSE`\r\n~~~\r\n\r\n`renameNx`：与remane类似，但是，如果重新命名的名字已经存在，不会替换成功\r\n\r\n`setTimeout, expire`：设定一个key的活动时间（s）\r\n\r\n`$redis->setTimeout(\'x\', 3)`\r\n\r\n`expireAt`：key存活到一个unix时间戳时间\r\n\r\n`$redis->expireAt(\'x\', time() + 3)`\r\n\r\n`keys, getKeys`：返回满足给定pattern的所有key\r\n\r\n`$keyWithUserPrefix = $redis->keys(\'user*\')`\r\n\r\n`dbSize`：查看现在数据库有多少key\r\n\r\n`$count = $redis->dbSize()`\r\n\r\n`auth`：密码认证\r\n\r\n`$redis->auth(\'foobared\')`\r\n\r\n`bgrewriteaof`：使用aof来进行数据库持久化\r\n\r\n`$redis->bgrewriteaof()`\r\n\r\n`slaveof`：选择从服务器\r\n\r\n`$redis->slaveof(\'10.0.1.7\', 6379)`\r\n\r\n`save`：将数据同步保存到磁盘\r\n\r\n`bgsave`：将数据异步保存到磁盘\r\n\r\n`lastSave`：返回上次成功将数据保存到磁盘的Unix时戳\r\n\r\n`info`：返回redis的版本信息等详情\r\n\r\n`type`：返回key的类型值\r\n~~~php\r\nstring: Redis::REDIS_STRING\r\nset: Redis::REDIS_SET\r\nlist: Redis::REDIS_LIST\r\nzset: Redis::REDIS_ZSET\r\nhash: Redis::REDIS_HASH\r\nother: Redis::REDIS_NOT_FOUND\r\n~~~', 0, 1, 1505913528, 1505984297),
(15, 'Yii2 理解', 1, 4, NULL, '摘自：[深入理解Yii2.0](http://www.digpage.com)\r\n### 行为 ###\r\n\r\n**要定义行为，通过继承 yii\\base\\Behavior 或其子类来建立一个类。**\r\n\r\n**类要使用Behaviors行为注入的Behaviors类的属性和方法，必需要继承yii\\base\\Component**\r\n~~~php\r\npublic function behaviors() {\r\n    return [\r\n        \'class\' => Behavior::className(),\r\n    ];\r\n}\r\n~~~\r\n或者\r\n~~~php\r\n$A = new A();\r\n$behavior = new Behavior();\r\n\r\n$A->attachBehavior(\'name\', $behavior); //  添加行为\r\n$A->detachBehavior(\'name\');  //  移除行为\r\n~~~\r\n\r\n**例子**：\r\n~~~php\r\n public function behaviors()\r\n {\r\n    return [\r\n        [\r\n            \'class\' => TimestampBehavior::className(),\r\n            \'attributes\' => [\r\n                ActiveRecord::EVENT_BEFORE_INSERT => [\'created_at\', \'updated_at\'],\r\n                ActiveRecord::EVENT_BEFORE_UPDATE => [\'updated_at\'],\r\n            ],\r\n            // if you\'re using datetime instead of UNIX timestamp:\r\n            // \'value\' => new Expression(\'NOW()\'),\r\n        ],\r\n    ];\r\n }\r\n~~~\r\n\r\n- - -\r\n        从实现的效果看，你是不是会认为Yii真是多此一举？PHP中要达到这样的效果，可以使用继承呀，可以使用PHP新引入的特性（Traits）呀。但是，行为具有继承和特性所没有的优点，从实际使用的角度讲，继承和特性更靠底层点。靠底层，就意味着开发效率低，运行效率高。行为的引入，是以可以接受的运行效率牺牲为成本，谋取开发效率大提升的一笔买卖。\r\n\r\n**行为与继承**\r\n\r\n        首先来讲，拿行为与继承比较，从逻辑上是不对的，这两者是在完全不同的层面上的事物，是不对等的。之所以进行比较，是因为在实现的效果上，两者有的类似的地方。看起来，行为和继承都可以使一个类具有另一个类的属性和方法，从而达到扩充类的功能的目的。\r\n        相比较于使用继承的方式来扩充类功能，使用行为的方式，一是不必对现有类进行修改，二是PHP不支持多继承，但是Yii可以绑定多个行为，从而达到类似多继承的效果。\r\n        反过来，行为是绝对无法替代继承的。亚洲人，美洲人都是地球人，你可以将亚洲人和美洲人当成地球人来对待。但是，你绝对不能把一只在某些方面表现得像人的猴子，真的当成人来对待。\r\n        这里就不展开讲了。从本质上来讲，行为只是一种设计模式，是解决问题的方法学。继承则是PHP作为编程语言所提供的特性，根本不在一个层次上。\r\n\r\n**行为与特性**\r\n\r\n        特性是PHP5.4之后引入的一个新feature。从实现效果看，行为与特性都达到把自身的public 变量、属性、方法注入到当前类中去的目的。在使用上，他们也各有所长，但总的原则可以按下面的提示进行把握。\r\n\r\n        倾向于使用行为的情况：\r\n\r\n        行为从本质上讲，也是PHP的类，因此一个行为可以继承自另一个行为，从而实现代码的复用。而特性只是PHP的一种语法，效果上类似于把特性的代码导入到了类中从而实现代码的注入，特性是不支持继承的。\r\n        行为可以动态地绑定、解除，而不必要对类进行修改。但是特性必须在类在使用 use 语句，要解除特性时，则要删除这个语句。换句话说，需要对类进行修改。\r\n        行为还以在在配置阶段进行绑定，特性就不行了。\r\n        行为可以用于对事件进行反馈，而特性不行。\r\n        当出现命名冲突时，行为会自行排除冲突，自动使用先绑定的行为。而特性在发生冲突时，需要人为干预，修改发生冲突的变量名、属性名、方法名。\r\n\r\n        倾向于使用特性的情况：\r\n\r\n        特性比行为在效率上要高一点，因为行为其实是类的实例，需要时间和空间进行分配。\r\n        特性是PHP的语法，因此，IDE的支持要好一些。目前还没有IDE能支持行为。\r\n\r\n### 服务定位器 ###\r\n\r\n要使用服务定位器，第一步是要注册相关组件。 组件可以通过 `yii\\di\\ServiceLocator::set()`方法进行注册。以下的方法展示了注册组件的不同方法：\r\n~~~php\r\nuse yii\\di\\ServiceLocator;\r\nuse yii\\caching\\FileCache;\r\n\r\n$locator = new ServiceLocator;\r\n// 通过一个可用于创建该组件的类名，注册 \"cache\" （缓存）组件。\r\n$locator->set(\'cache\', \'yii\\caching\\ApcCache\');\r\n// 通过一个可用于创建该组件的配置数组，注册 \"db\" （数据库）组件。\r\n$locator->set(\'db\', [\r\n    \'class\' => \'yii\\db\\Connection\',\r\n    \'dsn\' => \'mysql:host=localhost;dbname=demo\',\r\n    \'username\' => \'root\',\r\n    \'password\' => \'\',\r\n]);\r\n// 通过一个能返回该组件的匿名函数，注册 \"search\" 组件。\r\n$locator->set(\'search\', function () {\r\n    return new app\\components\\SolrService;\r\n});\r\n// 用组件注册 \"pageCache\" 组件\r\n$locator->set(\'pageCache\', new FileCache);\r\n\r\n一旦组件被注册成功，你可以任选以下两种方式之一，通过它的 ID 访问它：\r\n$cache = $locator->get(\'cache\');\r\n// 或者\r\n$cache = $locator->cache;\r\n~~~\r\n你可以通过 `yii\\di\\ServiceLocator::has()` 检查某组件 ID 是否被注册。\r\n\r\n- - -\r\n**总结：**\r\n\r\n    Yii 类提供了一个静态的 $container 成员变量用于引用DI容器。 在入口脚本中，会创建一个DI容器，并赋值给这个 $container 。\r\n    Service Locator通过 Yii::createObject() 来获取实例， 而这个 Yii::createObject() 是调用了DI容器的 yii\\di\\Container::get() 来向 Yii::$container 索要实例的。 因此，Service Locator最终是通过DI容器来创建、获取实例的。\r\n    所有的Module，包括Application都继承自 yii\\di\\ServiceLocator ，都是Service Locator。 因此，DI容器和Service Locator就构成了整个Yii的基础。', 0, 1, 1505917236, 1506043064);
INSERT INTO `learning` (`id`, `title`, `uid`, `cid`, `cover`, `content`, `remend`, `status`, `created_at`, `updated_at`) VALUES
(16, 'Linux 命令', 1, 5, NULL, '摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n**查询使用者**： `w, who, last, lastlog`\r\n\r\n**使用者对谈**：\r\n\r\n`write` 使用者账号 [用户所在终端接口]\r\n\r\n`mesg y/n`	开/关\r\n\r\n`wall \"something\"`		广播\r\n\r\n**发邮件**：\r\n\r\n` mail username@localhost -s \"邮件标题\"`\r\n\r\n    请将你的家目录下的环境变量文件 (~/.bashrc) 寄给自己！\r\n    mail -s \"bashrc file content\" vbird < ~/.bashrc\r\n\r\n- - -\r\n\r\n**查阅自己 bash 的程序**：`ps -l` \r\n\r\n**查阅系统所有运行的程序**： `ps -aux`\r\n\r\n*如果你发现在列出的某个程序的 CMD 后面还接上 `<defunct>` 时，就代表该程序是僵尸程序啦*\r\n\r\n**持续侦测程序运行的状态**：`top -d [刷新间隔 s] -p [指定pid]`\r\n\r\n**在 top 运行过程当中可以使用的按键命令**：\r\n\r\n    ? ：显示在 top 当中可以输入的按键命令；\r\n    P ：以 CPU 的使用资源排序显示；\r\n    M ：以 Memory 的使用资源排序显示；\r\n    N ：以 PID 来排序喔！\r\n    T ：由该 Process 使用的 CPU 时间累积 (TIME+) 排序。\r\n    k ：给予某个 PID 一个讯号  (signal)\r\n    r ：给予某个 PID 重新制订一个 nice 值。\r\n    q ：离开 top 软件的按键。\r\n\r\n**藉由文件(或文件系统)找出正在使用该文件的程序**：`fuser filepath`\r\n\r\n**查看已启动的相关服务**：`ps -ef | grep php`\r\n\r\n**查看启用port**：`netstat -tuln`\r\n    80: WWW\r\n    22: ssh\r\n    21: ftp\r\n    25: mail\r\n    111: RPC(远程程序呼叫)\r\n    631: CUPS(列印服务功能)\r\n\r\n- - -\r\n\r\n**显示包含此软件包的所有位置**：`dpkg -S softwarename`\r\n**显示安装路径**：`dpkg -L softwarename`\r\n**显示软件版本**：`dpkg -l softwarename` \r\n\r\n- - -\r\n\r\n**kill PID 选项与参数**：\r\n\r\n    -l  ：这个是 L 的小写，列出目前 kill 能够使用的讯号 (signal) 有哪些？\r\n    -1 ：重新读取一次参数的配置档 (类似 reload)；\r\n    -2 ：代表与由键盘输入 [ctrl]-c 同样的动作；\r\n    -9 ：立刻强制删除一个工作；\r\n    -15：以正常的程序方式终止一项工作。与 -9 是不一样的。\r\n\r\n[root@www ~]# `killall [-iIe] [command name]`\r\n\r\n**选项与参数**：`killall -i -9 bash`\r\n\r\n    -i  ：interactive 的意思，互动式的，若需要删除时，会出现提示字节给使用者；\r\n    -e  ：exact 的意思，表示『后面接的 command name 要一致』，但整个完整的命令\r\n          不能超过 15 个字节。\r\n    -I  ：命令名称(可能含参数)忽略大小写。\r\n\r\n- - -\r\n\r\n**让在背景的工作在你注销后还能够继续的运行,将工作放置到系统背景**\r\n\r\n[root@www ~]# `nohup [命令与参数]`     *在终端机前景中工作*\r\n[root@www ~]# `nohup [命令与参数] &`    * 在终端机背景中工作*\r\n\r\n- - -\r\n\r\n### tcpdump ###\r\n[root@www ~]# `tcpdump [-AennqX] [-i 接口] [-w 储存档名] [-c 次数] [-r 档案] [所欲撷取的封包数据格式]`\r\n\r\n**选项与参数**\r\n\r\n    -A ：封包的内容以 ASCII 显示，通常用来捉取 WWW 的网页封包资料。\r\n    -e ：使用资料连接层 (OSI 第二层) 的 MAC 封包数据来显示；\r\n    -nn：直接以 IP 及 port number 显示，而非主机名与服务名称\r\n    -q ：仅列出较为简短的封包信息，每一行的内容比较精简\r\n    -X ：可以列出十六进制 (hex) 以及 ASCII 的封包内容，对于监听封包内容很有用\r\n    -i ：后面接要『监听』的网络接口，例如 eth0, lo, ppp0 等等的界面；\r\n    -w ：如果你要将监听所得的封包数据储存下来，用这个参数就对了！后面接档名\r\n    -r ：从后面接的档案将封包数据读出来。那个『档案』是已经存在的档案，\r\n         并且这个『档案』是由 -w 所制作出来的。\r\n    -c ：监听的封包数，如果没有这个参数， tcpdump 会持续不断的监听，\r\n         直到使用者输入 [ctrl]-c 为止。\r\n    所欲撷取的封包数据格式：我们可以专门针对某些通讯协议或者是 IP 来源进行封包撷取，\r\n         那就可以简化输出的结果，并取得最有用的信息。常见的表示方法有：\r\n         \'host foo\', \'host 127.0.0.1\' ：针对单部主机来进行封包撷取\r\n         \'net 192.168\' ：针对某个网域来进行封包的撷取；\r\n         \'src host 127.0.0.1\' \'dst net 192.168\'：同时加上来源(src)或目标(dst)限制\r\n         \'tcp port 21\'：还可以针对通讯协议侦测，如 tcp, udp, arp, ether 等\r\n         还可以利用 and 与 or 来进行封包数据的整合显示呢！\r\n\r\n以 IP 与 port number 捉下 eth0 这个网络卡上的封包，持续 3 秒\r\n\r\n[root@www ~]# `tcpdump -i eth0 -nn`\r\n[root@www ~]# `tcpdump -i eth0 -nn port 21`\r\n\r\n- - -\r\n\r\n### ssh ###\r\n[root@www ~]# `ssh [-f] [-o 参数项目] [-p 非正规埠口] [账号@]IP [指令]`\r\n\r\n**选项与参数：**\r\n\r\n    -f ：需要配合后面的 [指令] ，不登入远程主机直接发送一个指令过去而已；\r\n    -o：参数项目：主要的参数项目有：\r\n    	ConnectTimeout=秒数 ：联机等待的秒数，减少等待的时间\r\n    	StrictHostKeyChecking=[yes|no|ask]：预设是 ask，若要让 public key\r\n               主动加入 known_hosts ，则可以设定为 no 即可。\r\n    -p ：如果你的 sshd 服务启动在非正规的埠口 (22)，需使用此项目；\r\n\r\n*让对方主机自己跑该指令，你立刻回到近端主机继续工作*\r\n\r\n[root@www ~]# `ssh -f student@127.0.0.1 find / &> ~/find1.log`\r\n\r\n*删除掉 known_hosts 后，重新使用 root 联机到本机，且自动加上公钥记录*\r\n\r\n[root@www ~]# `rm ~/.ssh/known_hosts`\r\n\r\n[root@www ~]# `ssh -o StrictHostKeyChecking=no root@localhost`\r\n\r\n    制作不需要密码的 ssh 账号可利用 `ssh-keygen -t rsa` 来制作 public, private Key pair；\r\n    上述指令所制作出的 public key 必须要上传到 server 的 `~user/.ssh/authorized_keys` 档案中；\r\n\r\n### ssh 是用在登入而 sftp 在上传/下载文件，针对本机 (Client) 之行为(都加上 l, L 的小写 )  ###\r\n\r\n**变换目录到本机的 PATH 当中**： `lcd PATH`\r\n\r\n**列出目前本机所在目录下的文件名**：`lls`\r\n\r\n**针对资料上传/下载的行为** \r\n\r\n**将档案由本机上传到远程主机**：\r\n    put [本机目录或档案] [远程]\r\n    put [本机目录或档案]  则档案会放置到远程主机的当前目录下\r\n\r\n**将档案由远程主机下载回来**：\r\n    get [远程主机目录或档案] [本机]\r\n    get [远程主机目录或档案]  则档案会放置在目前本机所在的目录当中！可以使用通配符，例如：get *    get *.rpm    亦是可以的格式！\r\n\r\n**如果已经知道服务器上的档案档名了， 那么最简单的文件传输则是透过 scp 这个指令喔**\r\n\r\n[root@www ~]# `scp [-pr] [-l 速率] file  [账号@]主机:目录名`    *上传*\r\n[root@www ~]# `scp [-pr] [-l 速率] [账号@]主机:file  目录名`    *下载*\r\n\r\n**选项与参数：**\r\n\r\n    -p ：保留原本档案的权限数据；\r\n    -r ：复制来源为目录时，可以复制整个目录 (含子目录)\r\n    -l ：可以限制传输的速度，单位为 Kbits/s ，例如 [-l 800] 代表传输速限 100Kbytes/s\r\n\r\n**1. 将本机的 /etc/hosts 全部复制到 127.0.0.1 上面的 student 家目录内**\r\n\r\n[root@www ~]# `scp /etc/hosts student@127.0.0.1:~`\r\n\r\n**2. 将 127.0.0.1 这部远程主机的 /etc/bashrc 复制到本机的 /tmp 底下**\r\n\r\n[root@www ~]# `scp student@127.0.0.1:/etc/bashrc /tmp`\r\n\r\n- - -\r\n\r\n## 文件与目录的权限 ##\r\n\r\n**文件默认权限**：`umask`\r\n\r\n**显示目录下文件的所有隐藏属性**：`lsattr`\r\n\r\n`sudo chattr +i/+a filename`	保护不能进行任何操作包括root/只能添加，不能删除和修改;\r\n\r\n- - -\r\n\r\n## 磁盘的分割、格式化、检验与挂载 ##\r\n\r\n**fdisk**\r\n\r\n`fdisk [-l] 装置名称`\r\n\r\n`fdisk /dev/hdc`  仔细看，不要加上数字喔！\r\n\r\n`partprobe`  强制让核心重新捉一次 partition table\r\n\r\n**mkfs**\r\n\r\n`mkfs [-t 文件系统格式] 装置文件名`\r\n\r\n\r\n`mke2fs [-b block大小] [-i block大小] [-L 标头] [-cj] 装置`\r\n\r\n**选项与参数：**\r\n\r\n    -b  ：可以配置每个 block 的大小，目前支持 1024, 2048, 4096 bytes 三种；\r\n    -i  ：多少容量给予一个 inode 呢？\r\n    -c  ：检查磁盘错误，仅下达一次 -c 时，会进行快速读取测试；\r\n          如果下达两次 -c -c 的话，会测试读写(read-write)，会很慢～\r\n    -L  ：后面可以接标头名称 (Label)，这个 label 是有用的喔！e2label命令介绍会谈到～\r\n    -j  ：本来 mke2fs 是 EXT2 ，加上 -j 后，会主动加入 journal 而成为 EXT3。\r\n\r\n    mke2fs -j -L \"vbird_logical\" -b 2048 -i 8192 /dev/hdc6\r\n\r\n- - -\r\n\r\n## gcc 的简易用法 (编译、参数与链结) ##\r\n\r\n**仅将原始码编译成为目标档，并不制作连结等功能**：\r\n\r\n[root@www ~]# `gcc -c hello.c`        *会自动的产生 hello.o 这个文件，但是并不会产生 binary 运行档。*\r\n\r\n**在编译的时候，依据作业环境给予最佳化运行速度**\r\n\r\n[root@www ~]# `gcc -O hello.c -c`      *会自动的产生 hello.o 这个文件，并且进行最佳化喔！*\r\n\r\n**在进行 binary file 制作时，将连结的函式库与相关的路径填入**\r\n\r\n[root@www ~]# `gcc sin.c -lm -L/usr/lib -I/usr/include`\r\n\r\n    # 这个命令较常下达在最终连结成 binary file 的时候，\r\n    # -lm 指的是 libm.so 或 libm.a 这个函式库文件；\r\n    # -L 后面接的路径是刚刚上面那个函式库的搜寻目录；\r\n    # -I 后面接的是原始码内的 include 文件之所在目录。\r\n\r\n**将编译的结果输出成某个特定档名**\r\n\r\n[root@www ~]# `gcc -o hello hello.c`      *-o 后面接的是要输出的 binary file 档名*\r\n\r\n**在编译的时候，输出较多的信息说明**\r\n\r\n[root@www ~]# `gcc -o hello hello.c -Wall`      *加入 -Wall 之后，程序的编译会变的较为严谨一点，所以警告信息也会显示出来！*\r\n\r\n- - -\r\n\r\n### 编译： ###\r\n           1. ./configure\r\n    这个步骤就是在创建 Makefile 这个文件罗！通常程序开发者会写一支 scripts 来检查你的 Linux 系统、相关的软件属性等等，这个步骤相当的重要， 因为未来你的安装资讯都是这一步骤内完成的！另外，这个步骤的相关资讯应该要参考一下该目录下的 README 或 INSTALL 相关的文件！\r\n    \r\n           2. make clean\r\n    make 会读取 Makefile 中关於 clean 的工作。这个步骤不一定会有，但是希望运行一下，因为他可以去除目标文件！因为谁也不确定原始码里面到底有没有包含上次编译过的目标文件 (*.o) 存在，所以当然还是清除一下比较妥当的。 至少等一下新编译出来的运行档我们可以确定是使用自己的机器所编译完成的嘛！\r\n    \r\n           3. make\r\n    make 会依据 Makefile 当中的默认工作进行编译的行为！编译的工作主要是进行 gcc 来将原始码编译成为可以被运行的 object files ，但是这些 object files 通常还需要一些函式库之类的 link 后，才能产生一个完整的运行档！使用 make 就是要将原始码编译成为可以被运行的可运行档，而这个可运行档会放置在目前所在的目录之下， 尚未被安装到预定安装的目录中；\r\n    \r\n           4. make install\r\n    通常这就是最后的安装步骤了，make 会依据 Makefile 这个文件里面关於 install 的项目，将上一个步骤所编译完成的数据给他安装到预定的目录中，就完成安装啦！', 0, 1, 1505961939, 1505981923),
(17, 'Linux 函式库', 1, 5, NULL, '摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n**静态函式库的特色**：\r\n\r\n    扩展名为 .a;\r\n    利用静态函式库编译成的文件会比较大一些;\r\n    类函式库最大的优点，就是编译成功的可运行档可以独立运行;\r\n    函式库升级了，所有将此函式库纳入的程序都需要重新编译\r\n\r\n**动态函式库的特色**：\r\n\r\n    扩展名为 .so;\r\n    文件会比较小;\r\n    不能被独立运行;\r\n    函式库升级后，运行档根本不需要进行重新编译的行为\r\n\r\n假设我的 MySQL 数据库函式库在 /usr/lib/mysql 当中，如何读进 cache ？\r\n\r\n[root@www ~]# `vi /etc/ld.so.conf`\r\n\r\n    include ld.so.conf.d/*.conf\r\n    /usr/lib/mysql   <==这一行新增的啦！\r\n', 0, 1, 1505963884, 1505978470),
(18, 'Linux 目录学习', 1, 5, NULL, '摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n**/etc/passwd 文件结构**：`账号名称：口令(x)：UID：GID：用户信息说明栏：家目录：Shell`\r\n\r\n**/etc/shadow 文件结构**：`账号名称：口令：最近更动口令的日期：口令需要经过几天才可以再次被变更的天数：在多少天数内需要再次的变更口令的天数:口令需要变更期限前的警告天数：口令过期后的账号宽限时间(口令失效日)：账号失效日期：保留(空闲的)`\r\n\r\n**/etc/group 文件结构**：`组名：群组口令：GID：此群组支持的账号名称`\r\n\r\n**/etc/gshadow 文件结构**：`组名：口令栏，同样的，开头为 ! 表示无合法口令，所以无群组管理员：群组管理员的账号 (相关信息在 gpasswd 中介绍)： 该群组的所属账号 (与 /etc/group 内容相同！)`\r\n\r\n`/etc/init.d/* `：启动脚本放置处\r\n\r\n*系统上几乎所有的服务启动脚本都放置在这里！事实上这是公认的目录，我们的 CentOS 实际上放置在 /etc/rc.d/init.d/ 啦！ 不过还是有配置连结档到 /etc/init.d/ 的！既然这是公认的目录，因此建议您记忆这个目录即可！*\r\n\r\n`/etc/sysconfig/* `：各服务的初始化环境配置文件\r\n\r\n*几乎所有的服务都会将初始化的一些选项配置写入到这个目录下，举例来说，登录档的 syslog 这支 daemon 的初始化配置就写入在 /etc/sysconfig/syslog 这里呢！而网络的配置则写在 /etc/sysconfig/network 这个文件中。 所以，这个目录内的文件也是挺重要的*\r\n\r\n`/etc/xinetd.conf, /etc/xinetd.d/*` ：super daemon 配置文件\r\n\r\n*super daemon 的主要配置文件 (其实是默认值) 为 /etc/xinetd.conf ，不过我们上面就谈到了， super daemon 只是一个统一管理的机制，他所管理的其他 daemon 的配置则写在 /etc/xinetd.d/* 里头喔*\r\n\r\n`/etc/*`：各服务各自的配置文件\r\n\r\n`/var/lib/*`：各服务产生的数据库\r\n\r\n*一些会产生数据的服务都会将他的数据写入到 /var/lib/ 目录中。举例来说，数据库管理系统 MySQL 的数据库默认就是写入 /var/lib/mysql/ 这个目录下啦*\r\n\r\n`/var/run/*`：各服务的程序之 PID 记录处', 0, 1, 1505964582, 1505978448),
(19, 'Linux 启动与关机相关', 1, 5, NULL, '**ubuntu 下将服务添加到启动项**  ：\r\n\r\n    先将启动脚本放到/etc/init.d/下\r\n    再到/etc/rc5.d/下建个软链接（ln -s ...）\r\n    sudo update-rc.d -f php-fpm enable\r\n    sudo update-rc.d -f php-fpm default\r\n\r\n### 那么问题来了 ###\r\n以下内容摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n**Linux 主机是怎么启动的呢？**\r\n\r\n    1. 加载 BIOS 的硬件资讯与进行自我测试，并依据配置取得第一个可启动的装置；\r\n    2. 读取并运行第一个启动装置内 MBR 的 boot Loader (亦即是 grub, spfdisk 等程序)；\r\n    3. 依据 boot loader 的配置加载 Kernel ，Kernel 会开始侦测硬件与加载驱动程序；\r\n    4. 在硬件驱动成功后，Kernel 会主动呼叫 init 程序，而 init 会取得 run-level 资讯；\r\n    5. init 运行 /etc/rc.d/rc.sysinit 文件来准备软件运行的作业环境 (如网络、时区等)；\r\n    6. init 运行 run-level 的各个服务之启动 (script 方式)；\r\n    7. init 运行 /etc/rc.d/rc.local 文件；\r\n    8. init 运行终端机模拟程序 mingetty 来启动 login 程序，最后就等待使用者登陆啦；\r\n\r\n\r\n**Run Level**：\r\n\r\n      ● 0 - halt (系统直接关机)\r\n      ● 1 - single user mode (单人维护模**(bold text here)**式，用在系统出问题时的维护)\r\n      ● 2 - Multi-user, without NFS (类似底下的 runlevel 3，但无 NFS 服务)\r\n      ● 3 - Full multi-user mode (完整含有网络功能的纯文字模式)\r\n      ● 4 - unused (系统保留功能)\r\n      ● 5 - X11 (与 runlevel 3 类似，但加载使用 X Window)\r\n      ● 6 - reboot (重新启动)\r\n\r\n**修改开机启动服务**：\r\n    \r\n    直接改 /etc/rc0.d ~ /etc/rc6.d 和 /etc/rcS.d 下的东西，S开头的表示启动，K开头的表示不启动\r\n    例如：想关闭 Red5 的开机自动启动，只需 #sudo mv /etc/rc2.d/S20red5 /etc/rc2.d/K20red5 就可以了。\r\n- - -\r\n**关机范例：**\r\n\r\n[root@www ~]# `/sbin/shutdown -h 10 \'I will shutdown after 10 mins\' `\r\n\r\n[root@www ~]# `shutdown -h now `\r\n\r\n*立刻关机，其中 now 相当于时间为 0 的状态 *\r\n\r\n[root@www ~]# `shutdown -h 20:25` \r\n\r\n*系统在今天的 20:25 分会关机，若在21:25才下达此命令，则隔天才关机 *\r\n\r\n[root@www ~]# `shutdown -h +10`\r\n \r\n*系统再过十分钟后自动关机 *\r\n\r\n[root@www ~]# `shutdown -r now `\r\n\r\n*系统立刻重新启动 *\r\n\r\n[root@www ~]# `shutdown -r +30 \'The system will reboot\'  `\r\n\r\n*再过三十分钟系统会重新启动，并显示后面的信息给所有在在线的使用者 *\r\n\r\n[root@www ~]# `shutdown -k now \'This system will reboot\' ` \r\n\r\n*仅发出警告信件的参数！系统并不会关机啦！吓唬人！*\r\n\r\n**当然常用的**：`init 0 （关机）；init 6 （重启）`\r\n\r\n- - -\r\n\r\n**bash 的进站与欢迎信息**： `/etc/issue, /etc/motd`\r\n\r\n    \\d 本地端时间的日期；\r\n    \\l 显示第几个终端机接口；\r\n    \\m 显示硬件的等级 (i386/i486/i586/i686...)；\r\n    \\n 显示主机的网络名称；\r\n    \\o 显示 domain name；\r\n    \\r 操作系统的版本 (相当于 uname -r)\r\n    \\t 显示本地端时间的时间；\r\n    \\s 操作系统的名称；\r\n    \\v 操作系统的版本。\r\n    /etc/motd	登陆后的显示信息;', 0, 1, 1505965275, 1505983931),
(20, 'Win环境下nginx 配置', 1, 100, NULL, '~~~php\r\n#user  nobody;\r\nworker_processes  1;\r\n\r\nerror_log  c:/wnmp/nginx/logs/error.log;\r\nerror_log  c:/wnmp/nginx/logs/error.log  notice;\r\nerror_log  c:/wnmp/nginx/logs/error.log  info;\r\n\r\npid        c:/wnmp/nginx/logs/nginx.pid;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n    sendfile       on;\r\n    tcp_nopush     on;\r\n    client_max_body_size 100m;\r\n    keepalive_timeout  65;\r\n    error_page 405 =200 $uri;\r\n\r\n    server {\r\n        listen       80;\r\n        root   path/to/服务根目录;\r\n        server_name  localhost;\r\n        index  index.html index.htm index.php;\r\n\r\n        location /项目入口目录 {\r\n            try_files $uri $uri/article_adminLTE/web /article_adminLTE/web/index.php?$args;\r\n        }\r\n\r\n        location ~ /项目入口目录\\.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar|woff|ttf)$ {\r\n                try_files $uri = 404;\r\n        }\r\n\r\n        location ~ \\.php$ {\r\n            fastcgi_pass   127.0.0.1:9000;\r\n            fastcgi_index  index.php;\r\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n            include        fastcgi_params;\r\n        }\r\n    }\r\n\r\n// 虚拟域名\r\n    server {\r\n        listen       80;\r\n        root   path/to/项目入口目录;\r\n        server_name  项目名称;\r\n        index  index.html index.htm index.php;\r\n\r\n        location / {\r\n            try_files $uri $uri/ /index.php?$args;\r\n        }\r\n\r\n        location ~ \\.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar|woff|ttf|map)$ {\r\n                try_files $uri = 404;\r\n        }\r\n\r\n        location ~:^/assets/.*\\.php$ {\r\n            deny all;\r\n        }\r\n\r\n        location ~ \\.php$ {\r\n            fastcgi_pass   127.0.0.1:9000;\r\n            fastcgi_index  index.php;\r\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n            include        fastcgi_params;\r\n        }\r\n    }\r\n}\r\n~~~', 0, 1, 1505965614, 1505965614),
(21, 'Shell 语法', 1, 5, NULL, '摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n### 变量： ###\r\n**Shell 的变量操作**：`echo	unset  export`\r\n\r\n[root@www ~]# `bash`       * <==进入到所谓的子程序*\r\n\r\n`env` 查看环境变量：`HOME, SHELL, LANG, USER, RANDOM等`\r\n\r\n`set` 查看所有变量\r\n\r\n`$$` 返回 pid\r\n\r\n`$?` 返回 上个命令的返回值\r\n\r\n[root@www ~]#` read var`   由键盘输入一内容，将该内容变成名为 var 的变量\r\n\r\nread -p \'please do something\' var   带提示的\r\n\r\n[root@www ~]# `declare [-aixr] variable`\r\n\r\n*选项与参数*：\r\n\r\n    -a  ：将后面名为 variable 的变量定义成为数组 (array) 类型\r\n    -i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型\r\n    -x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；\r\n    -r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset\r\n\r\n[root@www ~]# `declare -i sum=100+300+50`\r\n\r\n    declare -i date=`date +%s`获取当前时间戳\r\n    declare -i date=`date --date=\"YYYYMMDD\" +%s`获取某个时间戳\r\n- - -\r\n### 运行： ###\r\n`sh test.sh`	shell中的变量不会保留在父程序中\r\n\r\n`source test.sh`	shell中的变量会保留到父程序中\r\n\r\n\r\n**变量配置方式**\r\n\r\n![](/images/var1.png \"enter image title here\")\r\n\r\n![](/images/var2.png \"enter image title here\")\r\n\r\n- - -\r\n\r\n### test: ###\r\n\r\n**1. 关於某个档名的『文件类型』判断**\r\n\r\n`test -e filename` 表示存在否 \r\n\r\n    -e 该『档名』是否存在？(常用)\r\n    -f 该『档名』是否存在且为文件(file)？(常用)\r\n    -d 该『档名』是否存在且为目录(directory)？(常用)\r\n    -b 该『档名』是否存在且为一个 block device 装置？\r\n    -c 该『档名』是否存在且为一个 character device 装置？\r\n    -S 该『档名』是否存在且为一个 Socket 文件？\r\n    -p 该『档名』是否存在且为一个 FIFO (pipe) 文件？\r\n    -L 该『档名』是否存在且为一个连结档？\r\n\r\n**2. 关於文件的权限侦测**\r\n\r\n`test -r filename` 表示可读否 (但 root 权限常有例外) \r\n    \r\n    -r 侦测该档名是否存在且具有『可读』的权限？\r\n    -w 侦测该档名是否存在且具有『可写』的权限？\r\n    -x 侦测该档名是否存在且具有『可运行』的权限？\r\n    -u 侦测该档名是否存在且具有『SUID』的属性？\r\n    -g 侦测该档名是否存在且具有『SGID』的属性？\r\n    -k 侦测该档名是否存在且具有『Sticky bit』的属性？\r\n    -s 侦测该档名是否存在且为『非空白文件』？\r\n\r\n**3. 两个文件之间的比较**\r\n\r\n`test file1 -nt file2 `\r\n\r\n    -nt (newer than)判断 file1 是否比 file2 新\r\n    -ot (older than)判断 file1 是否比 file2 旧\r\n    -ef 判断 file1 与 file2 是否为同一文件，可用在判断 hard link 的判定上。 主要意义在判定，两个文件是否均指向同一个 inode\r\n\r\n**4. 关於两个整数之间的判定**\r\n\r\n`test n1 -eq n2 `\r\n\r\n    -eq 两数值相等 (equal)\r\n    -ne 两数值不等 (not equal)\r\n    -gt n1 大於 n2 (greater than)\r\n    -lt n1 小於 n2 (less than)\r\n    -ge n1 大於等於 n2 (greater than or equal)\r\n    -le n1 小於等於 n2 (less than or equal)\r\n\r\n**5. 判定字串的数据 **\r\n\r\n    test -z string 判定字串是否为 0 ？若 string 为空字串，则为 true\r\n    test -n string 判定字串是否非为 0 ？若 string 为空字串，则为 false。注： -n 亦可省略\r\n    test str1 = str2 判定 str1 是否等於 str2 ，若相等，则回传 true\r\n    test str1 != str2 判定 str1 是否不等於 str2 ，若相等，则回传 false\r\n\r\n**6. 多重条件判定**\r\n\r\n`test -r filename -a -x filename `\r\n\r\n    -a (and)两状况同时成立！例如 test -r file -a -x file，则 file 同时具有 r 与 x 权限时，才回传 true。\r\n    -o (or)两状况任何一个成立！例如 test -r file -o -x file，则 file 具有 r 或 x 权限时，就可回传 true。\r\n    ! 反相状态，如 test ! -x file ，当 file 不具有 x 时，回传 true\r\n\r\n**判断符号 [ ]**\r\n\r\n    在中括号 [] 内的每个组件都需要有空白键来分隔；\r\n    在中括号内的变量，最好都以双引号括号起来；\r\n    在中括号内的常数，最好都以单或双引号括号起来。\r\n\r\n- - -\r\n\r\n**Shell script 的默认变量($0, $1...)**\r\n\r\n    $0：运行的脚本档名\r\n    $1：第一个接的参数\r\n    $# ：代表后接的参数个数；\r\n    $@ ：代表『 \"$1\" \"$2\" \"$3\" \"$4\" 』之意，每个变量是独立的(用双引号括起来)；\r\n    $* ：代表『 \"$1c$2c$3c$4\" 』，其中 c 为分隔字节，默认为空白键， 所以本例中代表『 \"$1 $2 $3 $4\" 』之意。\r\n\r\n`shift`：造成参数变量号码偏移\r\n\r\n`shift number`：移除参数当中的前几个参数\r\n\r\n**多个条件判断 (if ... elif ... elif ... else ... fi) 分多种不同情况运行**\r\n~~~shell\r\ncase  $变量名称 in               *关键字为 case ，还有变量前有钱字号*\r\n  \"第一个变量内容\")              *每个变量内容建议用双引号括起来，关键字则为小括号 *\r\n	程序段\r\n	;;                                  *每个类别结尾使用两个连续的分号来处理！*\r\n  \"第二个变量内容\")\r\n	程序段\r\n	;;\r\n  *)                                       *最后一个变量内容都会用 * 来代表所有其他值*\r\n	                                   *不包含第一个变量内容与第二个变量内容的其他程序运行段*\r\n	exit 1\r\n	;;\r\nesac                                   *最终的 case 结尾！『反过来写』思考一下！*\r\n~~~\r\n\r\n**函数前面不用加 “function”**\r\n~~~shell\r\nfunctionName () {\r\n    do something;\r\n}\r\n~~~\r\n\r\n**当 condition 条件成立时，就进行回圈，直到 condition 的条件不成立才停止**\r\n~~~shell\r\nwhile [ condition ]                  中括号内的状态就是判断式\r\ndo                                         do 是回圈的开始！\r\n	echo \'hello world\';\r\ndone                                     done 是回圈的结束\r\n~~~\r\n\r\n**当 condition 条件成立时，就终止回圈， 否则就持续进行回圈的程序段**\r\n~~~shell\r\nuntil [ condition ]\r\ndo\r\n	echo \'hello world\';\r\ndone\r\n~~~\r\n\r\n**for 循环**\r\n~~~shell\r\nfor var in con1 con2 con3 ...\r\ndo\r\n	echo \'hello world\';\r\ndone\r\n\r\nfor num in $(seq 1 100)  for循环1到100\r\n- - -\r\nread -p \"Please input a number, I will count for 1+2+...+your_input: \" nu\r\n\r\ns=0\r\nfor (( i=1; i<=$nu; i=i+1 ))\r\ndo\r\n	s=$(($s+$i))\r\ndone\r\necho \"The result of \'1+2+3+...+$nu\' is ==> $s\"\r\n~~~\r\n\r\n[root@www ~]# `sh [-nvx] scripts.sh`\r\n\r\n**选项与参数：**\r\n\r\n    -n  ：不要运行 script，仅查询语法的问题\r\n    -v  ：再运行 sccript 前，先将 scripts 的内容输出到萤幕上\r\n    -x  ：将使用到的 script 内容显示到萤幕上，这是很有用的参数', 0, 1, 1505978370, 1505978435),
(22, 'Linux 使用笔记', 1, 5, NULL, '**切换为root**：`sudo -i/sudo su`\r\n\r\n**修改默认启动系统**：\r\n\r\n    sudo vi /etc/default/grub\r\n    GRUB-DEFAULT = 0\r\n    sudo update-grub\r\n\r\n**安装五笔**： `sudo apt install fcitx-table-wbpy`\r\n\r\n**增加五笔开机启动**：\r\n\r\n    sudo mkdir ~/.config/autostart\r\n    cp /usr/share/fcitx/xdg/autostart/fcitx-autostart.desktop ~/.config/autostart/\r\n\r\n**显示系统设置**：`sudo apt install unity-control-center`\r\n\r\n**安装sublime**\r\n\r\n    sudo add-apt-repository ppa:webupd8team/sublime-text-3\r\n    sudo apt update\r\n    sudo apt install sublime-text-installer\r\n\r\n**点击最小化**：`gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true`\r\n\r\n**unity至底部**：`gsettings set com.canonical.Unity.Launcher launcher-position Bottom`\r\n\r\n**安装chrome**\r\n\r\n    sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/\r\n    wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -\r\n    sudo apt update\r\n    sudo apt install google-chrome-stable\r\n\r\n- - -\r\n\r\n**dpkg 中断**\r\n    sudo rm /var/lib/dpkg/lock\r\n    sudo dpkg --configure -a\r\n\r\n**查看Ubuntu版本**：`lsb_release -a`\r\n\r\n**查看环境变量**：`echo $PATH`  \r\n\r\n**添加环境变量:/sbin**：`export PATH=$PATH:/sbin`\r\n\r\n`jobs` 列出的终端背景下的工作中\r\n\r\n    带 + 代表最近被放到背景的工作号码\r\n    带 - 代表最近最后第二个被放置到背景中的工作号码\r\n    而超过最后第三个以后的工作，就不会有 +/- 符号存在了\r\n\r\n**sh为link to dash的，导致一些命令用不了，改成bash script.sh即可，解决方法**：\r\n\r\n    （1）执行时由sh build.sh变成bash build.sh可以解决此问题。\r\n    （2）ln -s /bin/bash /bin/sh -f\r\n    （3）sudo dpkg-reconfigure dash 进行配置，道理同（2）\r\n\r\n归结来说，为两种方式。以上两种方法都可以实现。\r\n\r\n`crontab -e/-l/-r/-u`  编辑/列表/删除/用户\r\n\r\n    cron restart/reload/start/stop\r\n    * * * * * /usr/bin/php -f path of scripts >> path of log\r\n\r\n去掉 /etc/rsyslog.d/50-default.conf    cron.*前面的#  来开启crontab.log\r\n\r\n    sudo service rsyslog/cron  restart\r\n\r\n', 0, 1, 1505978888, 1505981359),
(23, 'Linux 之 cat & find & grep', 1, 5, NULL, '摘自：[鸟哥的私房菜](http://cn.linux.vbird.org/)\r\n\r\n### 文件查看 ###\r\n\r\n    cat  由第一行开始显示文件内容\r\n    tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！\r\n    nl   显示的时候，顺道输出行号！\r\n    more 一页一页的显示文件内容\r\n    less 与 more 类似，但是比 more 更好的是，他可以往前翻页！(b/空格，翻页)\r\n    head 只看头几行\r\n    tail 只看尾巴几行\r\n    od   以二进位的方式读取文件内容！\r\n\r\n    cat -n 行数\r\n\r\n- - -\r\n\r\n### 命令与文件的搜寻 ###\r\n\r\n    `which`	寻找运行档\r\n    `whereis`	寻找特定文件（搜索数据库）\r\n    `locate`	关键字搜索（搜索数据库）\r\n    `find`	在磁盘中搜索，较慢\r\n\r\n[root@www ~]# `find /etc -newer /etc/passwd`\r\n\r\n    -newer 用在分辨两个文件之间的新旧关系是很有用的！\r\n    +4代表大於等於5天前的档名：ex> find /var -mtime +4\r\n     -4代表小於等於4天内的文件档名：ex> find /var -mtime -4\r\n    4则是代表4-5那一天的文件档名：ex> find /var -mtime 4\r\n\r\n- - -\r\n\r\n### 路径与命令搜寻顺序 ###\r\n\r\n    以相对/绝对路径运行命令，例如『 /bin/ls 』或『 ./ls 』；\r\n    由 alias 找到该命令来运行；\r\n    由 bash 内建的 (builtin) 命令来运行；\r\n    透过 $PATH 这个变量的顺序搜寻到的第一个命令来运行。\r\n\r\n\r\n- - -\r\n\r\n### 数据流重导向 ###\r\n\r\n    标准输入　　(stdin) ：代码为 0 ，使用 < 或 << ；\r\n    标准输出　　(stdout)：代码为 1 ，使用 > 或 >> ；\r\n    标准错误输出(stderr)：代码为 2 ，使用 2> 或 2>> ；\r\n\r\n    1> ：以覆盖的方法将『正确的数据』输出到指定的文件或装置上；\r\n    1>>：以累加的方法将『正确的数据』输出到指定的文件或装置上；\r\n    2> ：以覆盖的方法将『错误的数据』输出到指定的文件或装置上；\r\n    2>>：以累加的方法将『错误的数据』输出到指定的文件或装置上；\r\n    2> /dev/null ：错误输出到黑洞\r\n\r\n[dmtsai@www ~]$ `find /home -name .bashrc > list 2>&1`\r\n\r\n*由于两股数据同时写入一个文件，又没有使用特殊的语法， 此时两股数据可能会交叉写入该文件内，造成次序的错乱，因此，使用 `2>&1` 的语法*\r\n\r\n- - -\r\n\r\n### 管线 ###\r\n\r\n[root@www ~]# `cut -d\'分隔字符\' -f fields`     *用于有特定分隔字符*\r\n\r\n[root@www ~]# `echo $PATH | cut -d \':\' -f 3,5`\r\n\r\n[root@www ~]# `cut -c 字符区间`                *用于排列整齐的信息*\r\n\r\n[root@www ~]# `export | cut -c 12-`\r\n\r\n[root@www ~]# `grep [-acinv] [--color=auto] \'搜寻字符串\' filename`\r\n\r\n**选项与参数**\r\n\r\n    -a ：将 binary 文件以 text 文件的方式搜寻数据\r\n    -c ：计算找到 \'搜寻字符串\' 的次数\r\n    -i ：忽略大小写的不同，所以大小写视为相同\r\n    -n ：顺便输出行号\r\n    -v ：反向选择，亦即显示出没有 \'搜寻字符串\' 内容的那一行！\r\n    --color=auto ：可以将找到的关键词部分加上颜色的显示喔！\r\n\r\n显示历史中含‘pplication\'的20个命令的倒数10行（倒序显示历史中含pplication的第10到20的命令）\r\n\r\n`history | grep -m 20 pplication | tac | head -n 10`		\r\n\r\n`grep -v`	 取反\r\n\r\n`sort` 排序\r\n\r\n`uniq` 去重\r\n\r\n`wc	统计文件 -l 行数 -w 字数 -m 字符数`\r\n\r\n`tee` 可以让 standard output 转存一份到文件内并将同样的数据继续送到屏幕去处理！\r\n\r\n`tr`	删除一段信息当中的文字，或者是进行文字信息的替换！\r\n\r\n[root@www ~]# `tr [-ds] SET1 ...`\r\n\r\n**选项与参数**\r\n\r\n    -d  ：删除信息当中的 SET1 这个字符串；\r\n    -s  ：取代掉重复的字符！\r\n\r\n将 last 输出的信息中，所有的小写变成大写字符：\r\n\r\n[root@www ~]# `last | tr \'[a-z]\' \'[A-Z]\'`\r\n\r\n**col**\r\n\r\n[root@www ~]# `col [-xb]`\r\n    \r\n    -x  ：将 tab 键转换成对等的空格键\r\n    -b  ：在文字内有反斜杠 (/) 时，仅保留反斜杠最后接的那个字符\r\n\r\n**join**	两个文件当中，有 \"相同数据\" 的那一行，才将他加在一起\r\n[root@www ~]# `join [-ti12] file1 file2`\r\n\r\n**选项与参数**\r\n\r\n    -t  ：join 默认以空格符分隔数据，并且比对『第一个字段』的数据，\r\n          如果两个文件相同，则将两笔数据联成一行，且第一个字段放在第一个！\r\n    -i  ：忽略大小写的差异；\r\n    -1  ：这个是数字的 1 ，代表『第一个文件要用那个字段来分析』的意思；\r\n    -2  ：代表『第二个文件要用那个字段来分析』的意思。\r\n\r\n`paste`：将两行贴在一起，且中间以 [tab] 键隔开\r\n\r\n[root@www ~]# `paste [-d] file1 file2`\r\n\r\n    -d  ：后面可以接分隔字符。默认是以 [tab] 来分隔的！\r\n    -   ：如果 file 部分写成 - ，表示来自 standard input 的数据的意思。\r\n\r\n**split**\r\n\r\n[root@www ~]# `split [-bl] file PREFIX`\r\n\r\n    -b  ：后面可接欲分割成的文件大小，可加单位，例如 b, k, m 等；\r\n    -l  ：以行数来进行分割。\r\n    PREFIX ：代表前导符的意思，可作为分割文件的前导文字。\r\n\r\n使用 ls -al / 输出的信息中，每十行记录成一个文件\r\n\r\n[root@www tmp]# `ls -al / | split -l 10 - test`\r\n\r\n一般来说，如果需要 stdout/stdin 时，但偏偏又没有文件，有的只是 - 时，那么那个 `-` 就会被当成 stdin 或 stdout ～\r\n\r\n**patch**\r\n\r\n    diff -Naur test.old test.new > test.patch		制作补丁\r\n    patch -p0 < test.patch			将test.old升级为test.new\r\n    pathc -R -p0 < test.patch		将test.old还原\r\n\r\n**pr **：显示文件的『文件时间』、『文件档名』及『页码』', 0, 1, 1505981596, 1505983900),
(24, 'Linux 之 tar & curl', 1, 5, NULL, '摘自：网络\r\n\r\n### tar ###\r\n**对于.tar结尾的文件** ：`tar -xf all.tar`\r\n\r\n**对于.gz结尾的文件**：`gzip -d all.gz` `gunzip all.gz` \r\n\r\n**对于.tgz或.tar.gz结尾的文件** ：`tar -xzf all.tar.gz` `tar -xzf all.tgz` \r\n\r\n**对于.bz2结尾的文件** ：`bzip2 -d all.bz2` `bunzip2 all.bz2 `\r\n\r\n**对于tar.bz2结尾的文件**：`tar -xjf all.tar.bz2 `\r\n\r\n**对于.Z结尾的文件**：`uncompress all.Z`\r\n\r\n**对于.tar.Z结尾的文件**：`tar -xZf all.tar.z`\r\n\r\n**.rar**\r\n\r\n    解压：rar x FileName.rar\r\n    压缩：rar a FileName.rar DirName\r\n\r\n**.tar.xz**\r\n\r\n先 `xz -d xxx.tar.xz` 将 xxx.tar.xz解压成 xxx.tar 然后，再用 `tar xvf xxx.tar` 来解包\r\n\r\n- - -\r\n\r\n部分摘自：[http://www.cnblogs.com/snow-flower/p/6130945.html](http://www.cnblogs.com/snow-flower/p/6130945.html)\r\n\r\n### CURL ###\r\n\r\n    curl -o filename file_path_url;	         *下载文件，重命名为filename*\r\n    curl -O file_path_url;	                *下载文件*\r\n    curl -L url;	                         *返回重定向的地址*\r\n    curl -i url;	                         *显示http response的头信息，连同网页代码一起*\r\n    curl -I url;	                         *只显示http response的头信息*\r\n    curl -D filename url;	                   *操作结束后将cookie写入filename内*\r\n    -s/--silent 	                         *静默模式。不输出任何东西*\r\n    -S/--show-error                         *显示错误*\r\n    -G/--get                                 *以get的方式来发送数据*\r\n\r\n当文件在下载完成之前结束该进程\r\n\r\n`curl -O http://www.wyangxp.com/test.php`\r\n\r\n##############             20.1%\r\n\r\n通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载\r\n\r\n`curl -C - -O http://www.wyangxp.com/test.php`\r\n\r\n###############            21.1%\r\n\r\n下载速度最大不会超过1000B/second\r\n\r\n`curl --limit-rate 1000B -O http://www.wyangxp.com/test.php`\r\n\r\n 若yy.html文件在2011/12/21之后有过更新才会进行下载\r\n\r\n`curl -z 21-Dec-11 http://www.wyangxp.com/test.php`\r\n\r\n- - -\r\n\r\n`curl -u username:password URL`\r\n\r\n通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露\r\n\r\n`curl -u username URL`\r\n\r\n列出public_html下的所有文件夹和文件\r\n\r\n`curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/`\r\n\r\n下载xss.php文件\r\n\r\n`curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php`\r\n\r\n将myfile.txt文件上传到服务器\r\n\r\n`curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com`\r\n\r\n同时上传多个文件\r\n\r\n`curl -u ftpuser:ftppass -T \"{file1,file2}\" ftp://ftp.testserver.com`\r\n\r\n从标准输入获取内容保存到服务器指定的文件中\r\n\r\n`curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt`\r\n\r\n指定代理主机和端口\r\n\r\n`curl -x proxysever.test.com:3128 http://www.wyangxp.com/test.php`\r\n\r\n将网站的cookies信息保存到sugarcookies文件中\r\n\r\n`curl -c sugarcookies http://www.wyangxp.com/test.php`\r\n\r\n使用上次保存的cookie信息\r\n\r\n`curl -b sugarcookies http://www.wyangxp.com/test.php`\r\n\r\n**传递请求数据**\r\n\r\n默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据，可以通过 --data/-d 方式指定使用POST方式传递数据\r\n\r\nGET：`curl -u username http://www.wyangxp.com/test.php?access_token=XXXXXXXXXX`\r\n\r\nPOST：`curl -u username --data \"param1=value1&param2=value\" http://www.wyangxp.com/test.php`\r\n\r\n也可以指定一个文件，将该文件中的内容当作数据传递给服务器端\r\n\r\n`curl --data @filename https://github.api.com/authorizations`\r\n\r\n*注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：`curl -d \"value%201\" http://www.wyangxp.com/test.php`*  \r\n\r\n在新版本的CURL中，提供了新的选项 `--data-urlencode`，通过该选项提供的参数会自动转义特殊字符。\r\n\r\n`curl --data-urlencode \"value 1\" http://www.wyangxp.com/test.php`\r\n\r\n除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：\r\n\r\n`curl -I -X DELETE http://www.wyangxp.com/test.php`\r\n\r\n上传文件\r\n\r\n`curl --form \"fileupload=@filename.txt\" http://www.wyangxp.com/test.php`\r\n', 0, 1, 1505981622, 1506050215),
(25, 'yii2 知识点', 1, 4, NULL, 'view内引入js:\r\n~~~script\r\n<script>\r\n    <?php $this->beginBlock(\'js\') ?>\r\n        var ue = UE.getEditor(\'article-content\',{initialFrameHeight:300});\r\n    <?php $this->endBlock(); ?>\r\n</script>\r\n~~~\r\n\r\n~~~php\r\n$this->registerJs($this->blocks[\'js\'],\\yii\\web\\View::POS_END);\r\n~~~\r\n\r\n很多时候不生效，这个坑了很久，那都是因为[http://www.manks.top/question/20160514000004.html](http://www.manks.top/question/20160514000004.html)', 0, 1, 1505984685, 1506050192),
(26, 'Node.js 之 event', 1, 8, NULL, '~~~js\r\nvar events = require(\'events\');\r\n\r\nvar event = new events.EventEmitter();\r\n\r\n*定义*\r\nvar listener1 = function listener1() {\r\n	console.log(\'listen1 is working\');\r\n}\r\n\r\nvar listener2 = function listener2() {\r\n	console.log(\'listener2 is working\');\r\n}\r\n\r\n*监听*\r\nevent.addListener(\'connection\', listener1);\r\n\r\nevent.on(\'connection\', listener2);\r\n\r\nvar listenerCount = require(\'events\').EventEmitter.listenerCount(event, \'connection\');\r\n\r\n*触发*\r\nevent.emit(\'connection\');\r\nconsole.log(listenerCount + \' listeners is working\');\r\n\r\n*移除*\r\nevent.removeListener(\'connection\', listener1);\r\n\r\nevent.emit(\'connection\');\r\n\r\nvar listenerCount = require(\'events\').EventEmitter.listenerCount(event, \'connection\');\r\nconsole.log(listenerCount + \' listeners is working\');\r\n\r\nconsole.log(\'Over\');\r\n~~~', 0, 1, 1505986139, 1505986297),
(27, 'Node.js 之 net', 1, 8, NULL, '~~~js\r\nvar net = require(\'net\');\r\n\r\nvar server = net.createServer(function(socket) {\r\n	console.log(\'Client come in: \' + socket.remoteAddress +\':\'+ socket.remotePort);\r\n	\r\n	socket.on(\'data\', function(data) {\r\n		socket.write(command, \'hex\');	\r\n		console.log(data);\r\n	});\r\n\r\n	socket.on(\'close\', function() {\r\n		console.log(\'close...\');\r\n	});\r\n\r\n	socket.on(\'error\', function(err) {\r\n		console.log(err);\r\n	})\r\n}).listen(6666, \'127.0.0.1\');\r\n~~~', 0, 1, 1505986436, 1505995320),
(28, 'Node.js 之 gulp', 1, 8, NULL, '~~~js\r\nvar gulp = require(\'gulp\');\r\nvar concat = require(\'gulp-concat\');\r\nvar uglify = require(\'gulp-uglify\');\r\n\r\nvar paths = {\r\n    test: [\r\n    	\'test1.js\',\r\n	\'test2.js\',\r\n    ],\r\n}\r\n\r\ngulp.task(\'taskName\', function() {\r\n    return gulp.src(paths.test)               // 指定路径\r\n    	.pipe(concat(\'test.all.js\'))            // 打包\r\n	.pipe(uglify())                    // 压缩\r\n	.pipe(concat(\'test.min.js\'))                  // 再打包\r\n	.pipe(gulp.dest(\'./dist/\'));              // 输出到目录\r\n});\r\n\r\n~~~', 0, 1, 1505987047, 1505987065),
(29, 'Node.js 之 FileSystem', 1, 8, NULL, '~~~js\r\n// Write Stream\r\nvar fs = require(\'fs\');\r\nvar data = \'hello world\';\r\n\r\nvar writableStream = fs.createWriteStream(\'outputs.txt\');\r\n\r\nwritableStream.write(data, \'UTF8\');\r\nwritableStream.end();\r\n\r\nwritableStream.on(\'finish\', function() {\r\n	console.log(\'done\');\r\n});\r\n\r\nwritableStream.on(\'error\', function(error) {\r\n	console.log(error.stack);\r\n});\r\n\r\nconsole.log(\'The End!!!\');\r\n\r\n// Read Stream\r\nvar fs = require(\'fs\');\r\nvar data = \'\';\r\n\r\nvar readableStream = fs.createReadStream(\'output.txt\');\r\n\r\nreadableStream.setEncoding(\'UTF8\');\r\n\r\nreadableStream.on(\'data\', function(chungk) {\r\n	data += chungk;\r\n});\r\n\r\nreadableStream.on(\'end\', function() {\r\n	console.log(data);\r\n});\r\n\r\nreadableStream.on(\'error\', function(error) {\r\n	console.log(error.stack);\r\n});\r\n\r\nconsole.log(\'TE!!!\');\r\n\r\n// Read And Write Stream\r\nvar fs = require(\'fs\');\r\nvar rstream = fs.createReadStream(\'output.txt\');\r\nvar wstream = fs.createWriteStream(\'input.txt\');\r\n\r\nrstream.pipe(wstream);\r\nconsole.log(\'CP Done\');\r\n\r\n// zip\r\nvar fs = require(\'fs\');\r\nvar zlib = require(\'zlib\');\r\nfs.createReadStream(\'input.txt\')\r\n	.pipe(zlib.createGzip())\r\n	.pipe(fs.createWriteStream(\'input.zip\'));\r\n\r\nconsole.log(\'Done!!!\');\r\n\r\n// unzip\r\nvar fs = require(\'fs\');\r\nvar zlib = require(\'zlib\');\r\nfs.createReadStream(\"input.zip\")\r\n	.pipe(zlib.createGunzip())\r\n	.pipe(fs.createWriteStream(\'input.txt\'));\r\n\r\nconsole.log(\'Done!!!\');\r\n\r\n// readFile\r\nvar fs = require(\'fs\');\r\nfs.readFile(\'test.txt\', function(err, data) {\r\n	if (err) {\r\n		console.log(err.stack);\r\n		return;\r\n	}\r\n	console.log(data.toString());\r\n});\r\n\r\nconsole.log(\'Over\');\r\n\r\n// readFile & writeFile\r\nvar fs = require(\'fs\');\r\nfs.writeFile(\'input.txt\', \'some words\', function(error) {\r\n	if (error) {\r\n		return console.error(error);\r\n	}\r\n\r\n	console.log(\'done!\');\r\n	fs.readFile(\'input.txt\', function(error, data) {\r\n		if (error) {\r\n			return console.error(error);\r\n		}\r\n\r\n		console.log(data.toString());\r\n	});\r\n});\r\n\r\n// console\r\nconsole.time(\'start\');\r\nfor (var i=0; i<1000; i++) {\r\n	console.log(\'hello world\');\r\n}\r\nconsole.timeEnd(\'start\');\r\n\r\nconsole.log(process.cwd());\r\nconsole.log(process.version);\r\nconsole.log(process.title);\r\nconsole.log(process.pid);\r\nconsole.log(process.platform);\r\nconsole.log(process.config);\r\nconsole.log(process.arch);\r\n\r\n~~~', 0, 1, 1505987182, 1505995795),
(30, 'Node.js 实例（klha）', 1, 8, NULL, '~~~js\r\nvar net = require(\'net\');\r\nvar util = require(\'util\');\r\nvar mysql = require(\'mysql\');\r\nvar dateFormat = require(\'dateformat\');\r\n\r\nvar db = mysql.createConnection({\r\n	    host : \'localhost\',\r\n	    port : \'3306\',\r\n	    user: \'root\',\r\n	    password: \'111111\',\r\n	    database: \'yii2_iot_klha\'\r\n	});\r\n\r\nvar clients = [],\r\n	gateway_logo = \'\';\r\nvar server = net.createServer(function(socket) {\r\n	util.log(\'Client come in: \' + socket.remoteAddress +\':\'+ socket.remotePort, \'\\n\\n\');\r\n\r\n	// 握手包\r\n	socket.write(\'15012222000180\', \'hex\');\r\n\r\n	// 定义间隔任务\r\n	socket.interval = setInterval(function(_socket) {\r\n		_socket.write(\'150100000006020300000008\', \'hex\');\r\n	}, 5 * 1000 * 60, socket);\r\n\r\n	socket.on(\'data\', function(data) {\r\n		var hexData = data.toString(\'hex\');\r\n		var str = data.toString(\'utf8\', 6);   // 1100201507100022(网关序列号)\r\n\r\n		// 查询传感器在线状态 	返回 15 01 00 00 00 04 ff 01 01 02	取02，转二进制0010 => 第二个设备在线\r\n		// socket.write(\'150100000006FF0155550008\', \'hex\');	\r\n		\r\n		// 查询02传感器各通道数据 	返回  15 01 00 00 00 13 02 03 10 /01 81 01 17 /02 01 02 3b /03 00 00 49 /14 00 01 9c\r\n		// 4个通道的数据类型 1（温度）=> 01 17、	2（湿度）=> 02 3b、	3（照度）=> 00 49、	14（CO2）=> 01 9c，转十进制为 27.9 、57.2 、73 、412\r\n		// socket.write(\'150100000006020300000008\', \'hex\');	\r\n\r\n		if (str != \'1100201507100022\') {		// 接收数据\r\n			var data_str = data.toString(\'hex\').substr(18);\r\n			var data_time = dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\");\r\n\r\n			// 清空原数据\r\n			var delSql = \"DELETE FROM data WHERE gateway_logo=\" + gateway_logo;\r\n\r\n			db.query(delSql, function(err, res) {\r\n				if (err) {\r\n					util.log(\'delete error: \' + err.message);\r\n					return ;\r\n				}\r\n\r\n				util.log(\'affectedRows: \' + res.affectedRows, \'\\n\\n\');\r\n			});\r\n\r\n			// 添加新数据\r\n			for (var i = 0; i < data_str.length/8; i++) {\r\n				var channel_num = data_str.substr(i * 8 + 0, 2);\r\n				var float = data_str.substr(i * 8 + 2, 2);\r\n				var value = parseInt(data_str.substr(i * 8 + 4, 4), 16) / Math.pow(10, float.charAt(1));\r\n\r\n				// db.connect();\r\n				var addSql = \"INSERT INTO data VALUES (NULL, ?, ?, ?, ?, ?, ?, ?)\";\r\n				var addSqlParams = [data_time, gateway_logo, 2, parseInt(i) + 1, parseInt(channel_num), value, 0];\r\n\r\n				db.query(addSql, addSqlParams, function(err, res) {\r\n					if (err) {\r\n						util.log(err.message);\r\n						return ;\r\n					}\r\n\r\n					util.log(dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"), \'\\n\\n\', \'insertId: \', res.insertId);\r\n				});\r\n				// db.end();\r\n			}\r\n\r\n			for (key in clients) {\r\n				clearInterval(clients[key].interval);\r\n				clients[key].interval = setInterval(function(_socket, _key) {\r\n					_socket.write(\'150100000006020300000008\', \'hex\');\r\n				}, 5 * 1000 * 60, clients[key], key);\r\n			}\r\n		} else {		// 第一次连接\r\n			clients[hexData.substr(0, 18)] = socket;\r\n			gateway_logo = str;\r\n		}\r\n	});\r\n\r\n	socket.on(\'close\', function() {\r\n		for (key in clients) {\r\n			if (clients[key] === socket) {\r\n				util.log(\'Client:\' + key + \' end\');\r\n				clearInterval(clients[key].interval);\r\n				delete clients[key];\r\n				break;\r\n			};\r\n		}\r\n		util.log(\'one client end\');\r\n	})\r\n}).listen(7003, \'192.168.0.111\');\r\n~~~', 0, 0, 1506044837, 1506050221),
(31, 'CURL 抓知乎日报的文章', 1, 4, NULL, '~~~php\r\n<?php \r\n\r\n$ch = curl_init();\r\n$url = \'http://daily.zhihu.com\';\r\n\r\n$options = [\r\n	CURLOPT_URL => $url,\r\n	CURLOPT_RETURNTRANSFER => 1,\r\n	CURLOPT_TIMEOUT => 30,\r\n	CURLOPT_REFERER => $url,\r\n];\r\ncurl_setopt_array($ch, $options);\r\n$res = curl_exec($ch);\r\ncurl_close($ch);\r\n\r\n// U（贪婪模式），i（忽略大小写），s（匹配换行）\r\n$a_preg = \'/<div class=\"box\">.*<a href=\"(?<href>.*)\".*<img src=\"(?<img_url>.*)\".*<span class=\"title\">(?<title>.*)<\\/span>/Uis\';\r\n\r\n// 匹配文章连接部分\r\npreg_match_all($a_preg, $res, $matchs);\r\n\r\n$data = [];\r\nfor ($i = 0; $i < count($matchs[\'href\']); $i++) {\r\n	$title = str_replace(PHP_EOL, \'\', $matchs[\'title\'][$i]);		// 去空格、换行符\r\n	$href = (strpos($matchs[\'href\'][$i], \'http\') === false) ? $url . $matchs[\'href\'][$i] : $matchs[\'href\'][$i];			// 判断绝对还是相对路径\r\n	$img_url = (strpos($matchs[\'img_url\'][$i], \'http\') === false) ? $url . $matchs[\'img_url\'][$i] : $matchs[\'img_url\'][$i];\r\n\r\n	// 保存文章title图片到本地\r\n	$filepath = save_img(\'./uploads/\', $img_url);\r\n\r\n	$curl = curl_init();\r\n\r\n	$options = [\r\n		CURLOPT_URL => $href,\r\n		CURLOPT_RETURNTRANSFER => 1,\r\n		CURLOPT_TIMEOUT => 30,\r\n		CURLOPT_REFERER => $url,\r\n	];\r\n	curl_setopt_array($curl, $options);\r\n	$content_res = curl_exec($curl);\r\n	curl_close($curl);\r\n\r\n	$content_preg = \'/<div class=\"answer\">.*<div class=\"meta\">.*<div class=\"content\">(?<content>.*)<\\/div>/Uis\';\r\n\r\n	// 匹配具体内容\r\n	preg_match_all($content_preg, $content_res, $content_matchs);\r\n\r\n	$content = $content_matchs[\'content\'][0];\r\n\r\n	// 保存内容图片到本地\r\n	preg_match_all(\'/\\<img.*src=\"(?<content_img_urls>.*)\"/Uis\', $content, $content_img_urls);\r\n\r\n	$content_img_path = [];\r\n	foreach ($content_img_urls[\'content_img_urls\'] as $img) {\r\n		$content_img_path[] = save_img(\'./content/\', $img);\r\n	}\r\n\r\n	// 替换图片链接\r\n	$content = str_replace($content_img_urls[\'content_img_urls\'], $content_img_path, $content);\r\n\r\n	// 组合数据入库\r\n	$data[] = [\r\n		\'href\' => $href,\r\n		\'img_url\' => $filepath,\r\n		\'title\' => $title,\r\n		\'content\' => str_replace(PHP_EOL, \'\', $content),\r\n	];\r\n}\r\n\r\n// 保存图片到本地\r\nfunction save_img($path, $source) {\r\n	$ext = pathinfo($source, PATHINFO_EXTENSION);\r\n	$filename = uniqid () . \'.\' . $ext;\r\n	$filepath = $path . $filename;\r\n\r\n	if (file_put_contents($filepath, file_get_contents($source))) {\r\n		return $filepath;\r\n	}\r\n\r\n	return \'\';\r\n}\r\n\r\nvar_dump($data);\r\n~~~', 0, 1, 1506048130, 1506048352),
(32, 'PDO & Mysqli 连接MySQL测试', 1, 4, NULL, '~~~php\r\n<?php\r\n\r\n// mysql\r\n$mysqli = new Mysqli(\'127.0.0.1\', \'root\', \'111111\');\r\n\r\nif ($mysqli->connect_error) {\r\n    die(\'Connect Error (\' . $mysqli->connect_errno . \') \'\r\n            . $mysqli->connect_error);\r\n}\r\n\r\necho \'Connection OK\';\r\n$mysqli->close();\r\n\r\n\r\n// PDO\r\n$pdo = new \\PDO(\"mysql:host=localhost;dbname=byt_danling_iot\",\"root\",\"111111\");\r\n$data = $pdo->query(\"select * from byt_klha_data limit 1\");\r\nvar_dump($data);\r\n$data = $data->fetchAll(PDO::FETCH_BOTH);\r\nvar_dump($data);\r\n~~~', 0, 1, 1506048450, 1506048450),
(33, 'PHP SOAP 测试', 1, 4, NULL, '**服务器脚本：**\r\n\r\n~~~php\r\n<?php\r\n\r\nclass Service\r\n{\r\n    function HelloWorld()\r\n    {\r\n        return  \"Hello\";\r\n    }\r\n\r\n    function Add($a, $b)\r\n    {\r\n    	return $a + $b;\r\n    }\r\n\r\n}\r\n\r\n$server = new SoapServer(null, [\'uri\' => \'http://127.0.0.1/soap/service.php\']);\r\n\r\n// 添加处理请求的类\r\n$server->setClass(\"Service\");\r\n\r\n// 导入函数\r\n$server->addFunction(SOAP_FUNCTIONS_ALL);\r\n\r\n$server->handle();\r\n~~~\r\n\r\n**客户端脚本：**  \r\n\r\n~~~php\r\n<?php\r\n\r\ntry {\r\n	// 参数1：URI of the WSDL file or NULL if working in non-WSDL mode.\r\n	// 参数2：An array of options. If working in WSDL mode, this parameter is optional. If working in non-WSDL mode, the location and uri options must be set, where location is the URL of the SOAP server to send the request to, and uri is the target namespace of the SOAP service.（数组，WSDL模式此参数可选，非WSDL模式必须指定\'location\'服务脚本地址,\'uri\'SOAP服务的目标命名空间）\r\n	$soap = new SoapClient(null, [\r\n		\'location\' => \'http://127.0.0.1/soap/service.php\',\r\n		\'uri\' => \'http://127.0.0.1/soap/\'\r\n	]);	\r\n	\r\n	echo $soap->Add(12, 2);\r\n} catch (SoapFault $e) {\r\n	$message = $e->getMessage();\r\n	var_dump($message);\r\n}\r\n~~~\r\n\r\n***注：不要在win环境下进行本地测试，你懂的***', 0, 0, 1506049490, 1506142284);

-- --------------------------------------------------------

--
-- 表的结构 `life`
--

CREATE TABLE `life` (
  `id` int(11) NOT NULL,
  `title` varchar(60) NOT NULL COMMENT '标题',
  `uid` int(11) NOT NULL COMMENT '作者',
  `cid` int(11) NOT NULL COMMENT '分类',
  `cover` varchar(255) DEFAULT NULL COMMENT '封面',
  `content` text NOT NULL COMMENT '内容',
  `remend` int(11) NOT NULL DEFAULT '0' COMMENT '推荐',
  `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态',
  `created_at` int(11) NOT NULL COMMENT '创建时间',
  `updated_at` int(11) NOT NULL COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='生活';

--
-- 转存表中的数据 `life`
--

INSERT INTO `life` (`id`, `title`, `uid`, `cid`, `cover`, `content`, `remend`, `status`, `created_at`, `updated_at`) VALUES
(1, '南山忆', 1, 6, '/uploads/cover/59c6231f82981_vae.jpg', '<p style=\"text-align: center;\"><img src=\"/uploads/ueditor/images/20170923/150615730561497345.jpg\" title=\"150615730561497345.jpg\" alt=\"南山忆.jpg\"/></p><p style=\"text-align: center;\">乘一叶扁舟 入景随风望江畔渔火</p><p style=\"text-align: center;\">转竹林深处 残碑小筑僧侣始复诵</p><p style=\"text-align: center;\">苇岸红亭中 抖抖绿蓑邀南山对酌</p><p style=\"text-align: center;\">纸钱晚风送 谁家又添新痛</p><p style=\"text-align: center;\">独揽月下萤火 照亮一纸寂寞</p><p style=\"text-align: center;\">追忆那些什么 你说的爱我</p><p style=\"text-align: center;\">花开后花又落 轮回也没结果</p><p style=\"text-align: center;\">苔上雪告诉我 你没归来过</p><p style=\"text-align: center;\">遥想多年前 烟花满天 你静静抱着我</p><p style=\"text-align: center;\">丝竹声悠悠 教人忘忧 若南柯一梦</p><p style=\"text-align: center;\">星斗青光透 时无英雄 心猿已深锁</p><p style=\"text-align: center;\">可你辞世后 我再也没笑过</p><p style=\"text-align: center;\">独揽月下萤火 照亮一纸寂寞</p><p style=\"text-align: center;\">追忆那些什么 你说的爱我</p><p style=\"text-align: center;\">花开后花又落 轮回也没结果</p><p style=\"text-align: center;\">苔上雪告诉我 你没归来过独揽月下萤火</p><p style=\"text-align: center;\">照亮一纸寂寞</p><p style=\"text-align: center;\">追忆那些什么 你说的爱我</p><p style=\"text-align: center;\">花开后花又落 轮回也没结果</p><p style=\"text-align: center;\">苔上雪告诉我 你没归来过</p><p style=\"text-align: center;\">花开后花又落 轮回也没结果</p><p style=\"text-align: center;\">苔上雪告诉我 你没归来过</p>', 0, 1, 1506157343, 1506157343);

-- --------------------------------------------------------

--
-- 表的结构 `menu`
--

CREATE TABLE `menu` (
  `id` int(11) NOT NULL,
  `parent_id` int(11) NOT NULL DEFAULT '0',
  `name` varchar(45) NOT NULL COMMENT '标题',
  `url` varchar(45) NOT NULL COMMENT '路由',
  `icon` varchar(45) DEFAULT 'fa fa-th-list',
  `type` int(11) NOT NULL DEFAULT '0' COMMENT '类型',
  `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态',
  `created_at` int(11) NOT NULL COMMENT '创建时间',
  `updated_at` int(11) NOT NULL COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='菜单';

--
-- 转存表中的数据 `menu`
--

INSERT INTO `menu` (`id`, `parent_id`, `name`, `url`, `icon`, `type`, `status`, `created_at`, `updated_at`) VALUES
(1, 0, '菜单', 'menu/index', 'fa fa-th-list', 0, 1, 1504664227, 1504766018),
(2, 0, '生活', 'life/index', 'fa fa-coffee', 0, 1, 1504664227, 1504664227),
(3, 0, '学习', 'learning/index', 'fa fa-book', 0, 1, 1504664227, 1504664227),
(4, 3, 'PHP', 'learning/index?c=PHP', 'fa fa-th-list', 0, 1, 1504664227, 1504747575),
(5, 3, 'Linux', 'learning/index?c=linux', '', 0, 1, 1504694559, 1504747583),
(6, 2, 'Music', 'life/index?c=Music', '', 0, 1, 1504767036, 1504863353),
(7, 2, 'Movie', 'life/index?c=Movie', '', 0, 1, 1504767076, 1504863361),
(8, 3, 'Js', 'learning/index?c=js', '', 0, 1, 1505095527, 1505095527),
(9, 3, 'SQL', '/learning/index?c=SQL', '', 0, 1, 1505897610, 1505897610),
(100, 3, '其它', '/learning/index?c=其它', '', 0, 1, 1505895932, 1505895932);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `admin`
--
ALTER TABLE `admin`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username_UNIQUE` (`username`),
  ADD UNIQUE KEY `email_UNIQUE` (`email`);

--
-- Indexes for table `learning`
--
ALTER TABLE `learning`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `life`
--
ALTER TABLE `life`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `menu`
--
ALTER TABLE `menu`
  ADD PRIMARY KEY (`id`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `admin`
--
ALTER TABLE `admin`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- 使用表AUTO_INCREMENT `learning`
--
ALTER TABLE `learning`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;
--
-- 使用表AUTO_INCREMENT `life`
--
ALTER TABLE `life`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- 使用表AUTO_INCREMENT `menu`
--
ALTER TABLE `menu`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=101;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
